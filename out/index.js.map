{"version":3,"file":"index.js","mappings":"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","sources":[".././src/ReactQueue.ts",".././src/TelegramManager.ts",".././src/connection.ts",".././src/dbservice.ts",".././src/fetchWithTimeout.ts",".././src/index.ts",".././src/messages.ts",".././src/parseError.ts",".././src/promotions.ts",".././src/react.ts",".././src/utils.ts","../external commonjs \"axios\"","../external commonjs \"big-integer\"","../external commonjs \"dotenv\"","../external commonjs \"express\"","../external commonjs \"mongodb\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/client/users\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"fs\"","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["export class ReactQueue {\r\n    private static instance: ReactQueue;\r\n    private items: string[] = [];\r\n    private maxSize = 7;\r\n    private timer: NodeJS.Timeout;\r\n\r\n    private constructor() { }\r\n\r\n    public static getInstance(): ReactQueue {\r\n        if (!ReactQueue.instance) {\r\n            ReactQueue.instance = new ReactQueue();\r\n        }\r\n        return ReactQueue.instance;\r\n    }\r\n\r\n    public push(item: string) {\r\n        while (this.items.length >= this.maxSize) {\r\n            this.items.shift();\r\n        }\r\n        this.items.push(item);\r\n        if (this.timer) {\r\n            clearTimeout(this.timer);\r\n        }\r\n        this.timer = setTimeout(() => {\r\n            this.pop();\r\n        }, 100000); // 1 minute\r\n    }\r\n\r\n    public pop() {\r\n        if (this.items.length === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        const item = this.items.shift();\r\n        return item;\r\n    }\r\n\r\n    public contains(item: string) {\r\n        return this.items.indexOf(item) !== -1;\r\n    }\r\n\r\n    public isEmpty() {\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    public isFull() {\r\n        return this.items.length === this.maxSize;\r\n    }\r\n}\r\n","import { TelegramClient } from 'telegram';\r\nimport { StringSession } from 'telegram/sessions';\r\nimport { NewMessage, NewMessageEvent } from 'telegram/events';\r\nimport { Api } from 'telegram/tl';\r\nimport axios from 'axios';\r\nimport * as fs from 'fs';\r\nimport { CustomFile } from 'telegram/client/uploads';\r\nimport { contains, parseError, ppplbot } from './utils';\r\nimport { TotalList, sleep } from 'telegram/Helpers';\r\nimport { Dialog } from 'telegram/tl/custom/dialog';\r\nimport { LogLevel } from 'telegram/extensions/Logger';\r\nimport bigInt from 'big-integer';\r\nimport { IterDialogsParams } from 'telegram/client/dialogs';\r\nimport { react } from './react';\r\nimport { PromoteToGrp } from './promotions';\r\n\r\nclass TelegramManager {\r\n    private session: StringSession;\r\n    public phoneNumber: string | undefined;\r\n    static client: TelegramClient | null;\r\n    private channelArray: string[];\r\n    private static activeClientSetup: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string };\r\n    static instance: any;\r\n\r\n    constructor() {\r\n        this.session = new StringSession(process.env.session);\r\n        TelegramManager.client = null;\r\n        this.channelArray = [];\r\n    }\r\n\r\n    public static getInstance(): TelegramManager {\r\n        if (!TelegramManager.instance) {\r\n            TelegramManager.instance = new TelegramManager();\r\n        }\r\n        return TelegramManager.instance;\r\n    }\r\n\r\n    public static getActiveClientSetup() {\r\n        return TelegramManager.activeClientSetup;\r\n    }\r\n\r\n    public static setActiveClientSetup(data: { days?: number, archiveOld: boolean, formalities: boolean, newMobile: string, existingMobile: string, clientId: string } | undefined) {\r\n        TelegramManager.activeClientSetup = data;\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        if (TelegramManager.client) {\r\n            console.log(\"Destroying Client: \", this.phoneNumber)\r\n            await TelegramManager.client.destroy();\r\n            TelegramManager.client._destroyed = true\r\n            await TelegramManager.client.disconnect();\r\n        }\r\n        this.session.delete();\r\n    }\r\n\r\n    async getchatId(username: string): Promise<any> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const entity = await TelegramManager.client.getInputEntity(username);\r\n        return entity;\r\n    }\r\n\r\n    async getMe() {\r\n        const me = <Api.User>await TelegramManager.client.getMe();\r\n        return me\r\n    }\r\n\r\n    async errorHandler(error: { message: string; }) {\r\n        if (error.message && error.message == 'TIMEOUT') {\r\n            //Do nothing, as this error does not make sense to appear while keeping the client disconnected\r\n        } else {\r\n            console.error(`Error occurred for API ID ${this.phoneNumber}:`, error);\r\n            // Handle other types of errors\r\n        }\r\n    }\r\n\r\n    async createClient(handler = true): Promise<TelegramClient> {\r\n        TelegramManager.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\r\n            connectionRetries: 5,\r\n        });\r\n        TelegramManager.client.setLogLevel(LogLevel.ERROR);\r\n        //TelegramManager.client._errorHandler = this.errorHandler\r\n        await TelegramManager.client.connect();\r\n        const me = <Api.User>await TelegramManager.client.getMe();\r\n        console.log(\"Connected Client : \", me.phone);\r\n        if (handler && TelegramManager.client) {\r\n            console.log(\"Adding event Handler\")\r\n            TelegramManager.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\r\n        }\r\n        PromoteToGrp(TelegramManager.client)\r\n        return TelegramManager.client\r\n    }\r\n\r\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\r\n        const messages = await TelegramManager.client.getMessages(entityLike, { limit });\r\n        return messages;\r\n    }\r\n    async getDialogs(params: IterDialogsParams): Promise<TotalList<Dialog>> {\r\n        const chats = await TelegramManager.client.getDialogs(params);\r\n        console.log(\"TotalChats:\", chats.total);\r\n        return chats\r\n    }\r\n\r\n    async getLastMsgs(limit: number): Promise<string> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const msgs = await TelegramManager.client.getMessages(\"777000\", { limit });\r\n        let resp = '';\r\n        msgs.forEach((msg) => {\r\n            console.log(msg.text);\r\n            resp += msg.text + \"\\n\";\r\n        });\r\n        return resp;\r\n    }\r\n\r\n    async getSelfMSgsInfo(): Promise<{ photoCount: number; videoCount: number; movieCount: number, total: number }> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const self = <Api.User>await TelegramManager.client.getMe();\r\n        const selfChatId = self.id;\r\n\r\n        let photoCount = 0;\r\n        let videoCount = 0;\r\n        let movieCount = 0;\r\n\r\n        const messageHistory = await TelegramManager.client.getMessages(selfChatId, { limit: 200 });\r\n        for (const message of messageHistory) {\r\n            if (message.photo) {\r\n                photoCount++;\r\n            } else if (message.video) {\r\n                videoCount++;\r\n            }\r\n            const text = message.text.toLocaleLowerCase();\r\n            if (contains(text, ['movie', 'series', '1080', '720', '640', 'title', 'aac', '265', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\r\n                movieCount++;\r\n            }\r\n        }\r\n\r\n        return { photoCount, videoCount, movieCount, total: messageHistory.total };\r\n    }\r\n\r\n    async channelInfo(sendIds = true): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[] }> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const chats = await TelegramManager.client.getDialogs({ limit: 500 });\r\n        let canSendTrueCount = 0;\r\n        let canSendFalseCount = 0;\r\n        let totalCount = 0;\r\n        this.channelArray.length = 0;\r\n        console.log(\"TotalChats:\", chats.total);\r\n        for (const chat of chats) {\r\n            if (chat.isChannel || chat.isGroup) {\r\n                try {\r\n                    const chatEntity = <Api.Channel>chat.entity.toJSON();\r\n                    const { broadcast, defaultBannedRights } = chatEntity;\r\n                    totalCount++;\r\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\r\n                        canSendTrueCount++;\r\n                        this.channelArray.push(chatEntity.id.toString());\r\n                    } else {\r\n                        canSendFalseCount++;\r\n                    }\r\n                } catch (error) {\r\n                    parseError(error);\r\n                }\r\n            }\r\n        };\r\n        return {\r\n            chatsArrayLength: totalCount,\r\n            canSendTrueCount,\r\n            canSendFalseCount,\r\n            ids: sendIds ? this.channelArray : []\r\n        };\r\n    }\r\n\r\n    async getEntity(entity: Api.TypeEntityLike) {\r\n        return await TelegramManager.client?.getEntity(entity)\r\n    }\r\n\r\n    async joinChannel(entity: Api.TypeEntityLike) {\r\n        return await TelegramManager.client?.invoke(\r\n            new Api.channels.JoinChannel({\r\n                channel: await TelegramManager.client?.getEntity(entity)\r\n            })\r\n        );\r\n    }\r\n\r\n    connected() {\r\n        return TelegramManager.client.connected;\r\n    }\r\n\r\n    async connect() {\r\n        return await TelegramManager.client.connect();\r\n    }\r\n\r\n\r\n    async removeOtherAuths(): Promise<void> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const result = await TelegramManager.client.invoke(new Api.account.GetAuthorizations());\r\n        const updatedAuthorizations = result.authorizations.map((auth) => {\r\n            if (auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\r\n                auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\r\n                auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\r\n                auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru')\r\n                || auth.deviceModel.toLowerCase().includes('windows')) {\r\n                return auth;\r\n            } else {\r\n                TelegramManager.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\r\n                return null;\r\n            }\r\n        }).filter(Boolean);\r\n        console.log(updatedAuthorizations);\r\n    }\r\n\r\n    async getAuths(): Promise<any> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const result = await TelegramManager.client.invoke(new Api.account.GetAuthorizations());\r\n        return result;\r\n    }\r\n\r\n    async getAllChats(): Promise<any[]> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const chats = await TelegramManager.client.getDialogs({ limit: 500 });\r\n        console.log(\"TotalChats:\", chats.total);\r\n        const chatData = [];\r\n        for (const chat of chats) {\r\n            const chatEntity = await chat.entity.toJSON();\r\n            chatData.push(chatEntity);\r\n        }\r\n        return chatData;\r\n    }\r\n\r\n    async getCallLog() {\r\n        const result = <Api.messages.Messages>await TelegramManager.client.invoke(\r\n            new Api.messages.Search({\r\n                peer: new Api.InputPeerEmpty(),\r\n                q: '',\r\n                filter: new Api.InputMessagesFilterPhoneCalls({}),\r\n                minDate: 0,\r\n                maxDate: 0,\r\n                offsetId: 0,\r\n                addOffset: 0,\r\n                limit: 200,\r\n                maxId: 0,\r\n                minId: 0,\r\n                hash: bigInt(0),\r\n            })\r\n        );\r\n\r\n        const callLogs = <Api.Message[]>result.messages.filter(\r\n            (message: Api.Message) => message.action instanceof Api.MessageActionPhoneCall\r\n        );\r\n\r\n        const filteredResults = {\r\n            outgoing: 0,\r\n            incoming: 0,\r\n            video: 0,\r\n            chatCallCounts: {},\r\n            totalCalls: 0\r\n        };\r\n        for (const log of callLogs) {\r\n            filteredResults.totalCalls++;\r\n            const logAction = <Api.MessageActionPhoneCall>log.action\r\n\r\n            const callInfo = {\r\n                callId: logAction.callId.toString(),\r\n                duration: logAction.duration,\r\n                video: logAction.video,\r\n                timestamp: log.date\r\n            };\r\n\r\n            // Categorize by type\r\n            if (log.out) {\r\n                filteredResults.outgoing++;\r\n            } else {\r\n                filteredResults.incoming++;\r\n            }\r\n\r\n            if (logAction.video) {\r\n                filteredResults.video++;\r\n            }\r\n\r\n            // Count calls per chat ID\r\n            const chatId = (log.peerId as Api.PeerUser).userId.toString();\r\n            if (!filteredResults.chatCallCounts[chatId]) {\r\n                const ent = <Api.User>await TelegramManager.client.getEntity(chatId)\r\n                filteredResults.chatCallCounts[chatId] = {\r\n                    phone: ent.phone,\r\n                    username: ent.username,\r\n                    name: `${ent.firstName}  ${ent.lastName ? ent.lastName : ''}`,\r\n                    count: 0\r\n                };\r\n            }\r\n            filteredResults.chatCallCounts[chatId].count++;\r\n        }\r\n        const filteredChatCallCounts = Object.entries(filteredResults.chatCallCounts)\r\n            .filter(([chatId, details]) => details[\"count\"] > 5)\r\n            .map(([chatId, details]) => ({\r\n                ...(details as any),\r\n                chatId,\r\n            }));\r\n        console.log({\r\n            ...filteredResults,\r\n            chatCallCounts: filteredChatCallCounts\r\n        });\r\n\r\n        return {\r\n            ...filteredResults,\r\n            chatCallCounts: filteredChatCallCounts\r\n        };\r\n    }\r\n\r\n    async handleEvents(event: NewMessageEvent) {\r\n        if (!event.isPrivate) {\r\n            await react(event)\r\n        }\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount() {\r\n        try {\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async updateProfile(firstName: string, about: string) {\r\n        const data = {\r\n            lastName: \"\",\r\n        }\r\n        if (firstName !== undefined) {\r\n            data[\"firstName\"] = firstName\r\n        }\r\n        if (about !== undefined) {\r\n            data[\"about\"] = about\r\n        }\r\n        try {\r\n            const result = await TelegramManager.client.invoke(\r\n                new Api.account.UpdateProfile(data)\r\n            );\r\n            console.log(\"Updated NAme: \", firstName);\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async getLastActiveTime() {\r\n        const result = await TelegramManager.client.invoke(new Api.account.GetAuthorizations());\r\n        let latest = 0\r\n        result.authorizations.map((auth) => {\r\n            if (!auth.country.toLowerCase().includes('singapore') && !auth.deviceModel.includes(\"Windows\")) {\r\n                if (latest < auth.dateActive) {\r\n                    latest = auth.dateActive;\r\n                }\r\n            }\r\n        });\r\n        return (new Date(latest * 1000)).toISOString().split('T')[0];\r\n    }\r\n\r\n    async getContacts() {\r\n        const exportedContacts = await TelegramManager.client.invoke(new Api.contacts.GetContacts({\r\n            hash: bigInt(0)\r\n        }));\r\n        return exportedContacts;\r\n    }\r\n\r\n\r\n    async getMediaMetadata() {\r\n        const messages = await TelegramManager.client.getMessages('me', { limit: 100 });\r\n        const mediaMessages = messages.filter(message => message.media);\r\n        const data = []\r\n        for (const message of mediaMessages) {\r\n            if (message.photo) {\r\n                data.push({\r\n                    messageId: message.id,\r\n                    mediaType: 'photo'\r\n                })\r\n            } else if (message.video) {\r\n                data.push({\r\n                    messageId: message.id,\r\n                    mediaType: 'video'\r\n                })\r\n            }\r\n        }\r\n        return data\r\n    }\r\n\r\n    async downloadMediaFile(messageId: number) {\r\n        const message = await TelegramManager.client.getMessages(\"me\", { ids: messageId });\r\n        if (message) {\r\n            const file = await TelegramManager.client.downloadMedia(message[0]);\r\n            return file;\r\n        }\r\n        throw new Error('Media not found');\r\n    }\r\n\r\n    async updateUsername(baseUsername: string ) {\r\n        let newUserName = ''\r\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\r\n        let increment = 0;\r\n        if (username === '') {\r\n            try {\r\n                const res = await TelegramManager.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                console.log(`Removed Username successfully.`);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        } else {\r\n            while (true) {\r\n                try {\r\n                    const result = await TelegramManager.client.invoke(\r\n                        new Api.account.CheckUsername({ username })\r\n                    );\r\n                    console.log(result, \" - \", username)\r\n                    if (result) {\r\n                        const res = await TelegramManager.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                        console.log(`Username '${username}' updated successfully.`);\r\n                        newUserName = username\r\n                        break;\r\n                    } else {\r\n                        username = baseUsername + increment;\r\n                        increment++;\r\n                        await sleep(2000);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\r\n                        newUserName = username;\r\n                        break;\r\n                    }\r\n                    username = baseUsername + increment;\r\n                    increment++;\r\n                    await sleep(2000);\r\n                }\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n\r\n    async updatePrivacy() {\r\n        try {\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n            await TelegramManager.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async getFileUrl(url: string, filename: string): Promise<string> {\r\n        const response = await axios.get(url, { responseType: 'stream' });\r\n        const filePath = `/tmp/${filename}`;\r\n        await new Promise((resolve, reject) => {\r\n            const writer = fs.createWriteStream(filePath);\r\n            response.data.pipe(writer);\r\n            writer.on('finish', resolve);\r\n            writer.on('error', reject);\r\n        });\r\n        return filePath;\r\n    }\r\n\r\n    async updateProfilePic(image:any) {\r\n        try {\r\n            const file = await TelegramManager.client.uploadFile({\r\n                file: new CustomFile(\r\n                    'pic.jpg',\r\n                    fs.statSync(\r\n                        image\r\n                    ).size,\r\n                    image\r\n                ),\r\n                workers: 1,\r\n            });\r\n            console.log(\"file uploaded\")\r\n            await TelegramManager.client.invoke(new Api.photos.UploadProfilePhoto({\r\n                file: file,\r\n            }));\r\n            console.log(\"profile pic updated\")\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n    async hasPassword() {\r\n        const passwordInfo = await TelegramManager.client.invoke(new Api.account.GetPassword());\r\n        return passwordInfo.hasPassword\r\n    }\r\n\r\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await TelegramManager.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!TelegramManager.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await TelegramManager.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async deleteProfilePhotos() {\r\n        try {\r\n            const result = await TelegramManager.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: \"me\"\r\n                })\r\n            );\r\n            console.log(`Profile Pics found: ${result.photos.length}`)\r\n            if (result && result.photos?.length > 0) {\r\n                const res = await TelegramManager.client.invoke(\r\n                    new Api.photos.DeletePhotos({\r\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\r\n                    }))\r\n            }\r\n            console.log(\"Deleted profile Photos\");\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n\r\n    async createNewSession(): Promise<string> {\r\n        const me = await TelegramManager.client.getMe();\r\n        console.log(\"Phne:\", me.phone);\r\n        const newClient = new TelegramClient(new StringSession(''), parseInt(process.env.API_ID), process.env.API_HASH, {\r\n            connectionRetries: 1,\r\n        });\r\n        await newClient.start({\r\n            phoneNumber: me.phone,\r\n            password: async () => \"AjtdmwAjt1@\",\r\n            phoneCode: async () => {\r\n                console.log('Waiting for the OTP code from chat ID 777000...');\r\n                return await this.waitForOtp();\r\n            },\r\n            onError: (err: any) => { throw err },\r\n\r\n        });\r\n\r\n        const session = <string><unknown>newClient.session.save();\r\n        await newClient.disconnect();\r\n        await newClient.destroy();\r\n        return session\r\n    }\r\n\r\n    async waitForOtp() {\r\n        for (let i = 0; i < 3; i++) {\r\n            try {\r\n                console.log(\"Attempt : \", i)\r\n                const messages = await TelegramManager.client.getMessages('777000', { limit: 1 });\r\n                const message = messages[0];\r\n                if (message && message.date && message.date * 1000 > Date.now() - 60000) {\r\n                    const code = message.text.split('.')[0].split(\"code:**\")[1].trim();\r\n                    console.log(\"returning: \", code)\r\n                    return code;\r\n                } else {\r\n                    await sleep(5000)\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default TelegramManager;\r\n","import { UserDataDtoCrud } from \"./dbservice\";\r\nimport { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nimport { parseError } from \"./parseError\";\r\nimport TelegramManager from \"./TelegramManager\";\r\nimport { ppplbot } from \"./utils\";\r\nimport { prcessID } from \"./index\";\r\n\r\n\r\nlet retryTime = 0;\r\nexport let sendPing = false;\r\nsetTimeout(async () => {\r\n    await retryConnection();\r\n    setInterval(async () => {\r\n        await retryConnection();\r\n    }, 120000)\r\n}, 20000)\r\n\r\nfunction getAllEnvironmentVariables(): { [key: string]: string } {\r\n    return process.env;\r\n}\r\n\r\nasync function retryConnection() {\r\n    // if (sendPing && UserDataDtoCrud.getInstance()?.isConnected && TelegramManager.getInstance().connected()) {\r\n    //     try {\r\n    //         await fetchWithTimeout(`${process.env.uptimebot}/receive?clientId=${process.env.clientId}`, {}, false);\r\n    //     } catch (error) {\r\n    //         parseError(error, \"Cannot fetch pinger:\")\r\n    //     }\r\n    //     retryTime = 0\r\n    // } else {\r\n    //     retryTime++;\r\n    //     if (retryTime > 1) {\r\n    //         // await fetchWithTimeout(`${ppplbot}&text=${encodeURIComponent(`${process.env.clientId}: Exitting as-\\nProcessId:${prcessID}\\nMongo-${UserDataDtoCrud.getInstance()?.isConnected}\\nTGClient-${tgClass.getClient()?.connected}\\nRetryCount: ${retryTime}`)}`);\r\n    //     }\r\n    //     if (retryTime > 5) {\r\n    //         console.log(\"Exitiing\");\r\n    //         // await fetchWithTimeout(`${process.env.uptimebot}/refreshmap`)\r\n    //         await (UserDataDtoCrud.getInstance()).closeConnection();\r\n    //         // const environmentVariables = getAllEnvironmentVariables();\r\n    //         await fetchWithTimeout(`${ppplbot}&text=${(process.env.clientId).toUpperCase()}:UNABLE TO START at RETRY - EXITTING\\n\\nPid:${process.pid}\\n\\nenv: ${process.env.clientId}`);\r\n    //         process.exit(1);\r\n    //         //execSync(\"refresh\");\r\n    //     }\r\n    //     if (!process.env.repl?.includes(\"glitch\")) {\r\n    //         const resp = await fetchWithTimeout(`${process.env.repl}/getProcessId`, { timeout: 100000 });\r\n    //         try {\r\n    //             console.log(resp);\r\n    //             const data = await resp.data;\r\n    //             if (parseInt(data.ProcessId) === prcessID) {\r\n    //                 console.log('Sending Req to Check Health: ', `${process.env.uptimebot}/tgclientoff/${prcessID}?clientId=${process.env.clientId}`)\r\n    //                 const respon = await fetchWithTimeout(`${process.env.uptimebot}/tgclientoff/${prcessID}?clientId=${process.env.clientId}`);\r\n    //                 if (!respon.data) {\r\n    //                     console.log(\"EXITTING\")\r\n    //                     process.exit(1);\r\n    //                 }\r\n    //             } else {\r\n    //                 console.log(\"EXITTING\")\r\n    //                 process.exit(1);\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.log('Cannot fetch pinger', error);\r\n    //         }\r\n    //     } else {\r\n    //         const respon = await fetchWithTimeout(`${process.env.uptimebot}/tgclientoff/${prcessID}?clientId=${process.env.clientId}`);\r\n    //         if (!respon.data) {\r\n    //             console.log(\"EXITTING\")\r\n    //             process.exit(1);\r\n    //         }\r\n    //     }\r\n    // }\r\n    sendPing = false;\r\n}","console.log(`in Db - ${process.env.dbcoll} | ${process.env.username}`);\r\nimport { MongoClient, ServerApiVersion, ConnectOptions, ObjectId } from 'mongodb';\r\nimport { IChannel } from './promotions';\r\n\r\nexport enum user {\r\n    picCount = 'picCount',\r\n    totalCount = \"totalCount\",\r\n    lastMsgTimeStamp = \"lastMsgTimeStamp\",\r\n    prfCount = \"prfCount\",\r\n    paidCount = \"paidCount\",\r\n    limitTime = \"limitTime\",\r\n    canReply = \"canReply\",\r\n    payAmount = \"payAmount\",\r\n    chatId = \"chatId\",\r\n    username = \"username\",\r\n    paidReply = 'paidReply',\r\n    demoGiven = 'demoGiven',\r\n    secondShow = 'secondShow',\r\n    picsSent = 'picsSent'\r\n}\r\nexport interface UserDataDto {\r\n    picCount: number;\r\n    totalCount: number;\r\n    lastMsgTimeStamp: number;\r\n    prfCount: number;\r\n    paidCount: number;\r\n    limitTime: number;\r\n    canReply: number;\r\n    payAmount: number;\r\n    chatId: string;\r\n    username: string;\r\n    accessHash: string;\r\n    paidReply: boolean;\r\n    demoGiven: boolean;\r\n    secondShow: boolean;\r\n    profile: string;\r\n    picsSent?: string;\r\n}\r\n\r\nexport class UserDataDtoCrud {\r\n    private static instance: UserDataDtoCrud;\r\n    private db: any;\r\n    private clients = {}\r\n    private statsDb: any;\r\n    private statsDb2: any;\r\n    private promoteStatsDb: any;\r\n    private activeChannelDb: any;\r\n    public isConnected = false;\r\n    private client: MongoClient = undefined;\r\n\r\n    private constructor() {\r\n        console.log(\"Creating MongoDb Instance\");\r\n    }\r\n\r\n    static getInstance(): UserDataDtoCrud {\r\n        if (!UserDataDtoCrud.instance) {\r\n            UserDataDtoCrud.instance = new UserDataDtoCrud();\r\n        }\r\n        return UserDataDtoCrud.instance;\r\n    }\r\n    static isInstanceExist(): boolean {\r\n        return !!UserDataDtoCrud.instance;\r\n    }\r\n\r\n    async connect() {\r\n        if (!this.client && !this.isConnected) {\r\n            console.log('trying to connect to DB......', process.env.mongodburi)\r\n            try {\r\n                this.client = await MongoClient.connect(process.env.mongodburi as string, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1, maxPoolSize: 10 } as ConnectOptions);\r\n                console.log('Connected to MongoDB');\r\n                this.isConnected = true;\r\n                this.db = this.client.db(\"tgclients\").collection('userData');\r\n                this.statsDb = this.client.db(\"tgclients\").collection('stats');\r\n                this.statsDb2 = this.client.db(\"tgclients\").collection('stats2');\r\n                this.activeChannelDb = this.client.db(\"tgclients\").collection('activeChannels');\r\n                this.promoteStatsDb = this.client.db(\"tgclients\").collection('promoteStats');\r\n                const clients = await this.client.db(\"tgclients\").collection('clients').find({}).toArray();\r\n                this.client.on('close', () => {\r\n                    console.log('MongoDB connection closed.');\r\n                    this.isConnected = false;\r\n                });\r\n                clients.forEach(clt => {\r\n                    this.clients = Object.assign(this.clients, { [clt.dbcoll]: clt });\r\n                });\r\n                return true;\r\n            } catch (error) {\r\n                console.log(`Error connecting to MongoDB: ${error}`);\r\n                return false;\r\n            }\r\n        } else {\r\n            console.log('MongoConnection ALready Existing');\r\n        }\r\n    }\r\n\r\n    async checkIfUserAlreadyExists(chatId: string): Promise<boolean> {\r\n        const document = await this.db.findOne({ chatId });\r\n        if (document) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async textedClientCount(chatId: string): Promise<{ count: number, list: string[], lastDay: string[], lastHour: string[] }> {\r\n        try {\r\n            const documents: UserDataDto[] = await this.db.find({ chatId, client: { $ne: process.env.clientId } }).toArray();\r\n            const lastdayProfiles: UserDataDto[] = getRecentProfiles(documents, 24 * 60 * 60 * 1000, 6);\r\n            const lastHourProfiles: UserDataDto[] = getRecentProfiles(documents, 30 * 60 * 1000, 1);\r\n            let count = 0;\r\n            const profiles: string[] = documents.map(item => item.profile);\r\n            const profileslastDay: string[] = lastdayProfiles.map(item => item.profile);\r\n            const profileslastHour: string[] = lastHourProfiles.map(item => item.profile);\r\n\r\n            const twoDaysAgo = Date.now() - (1 * 24 * 60 * 60 * 1000)\r\n            for (const doc of documents) {\r\n                if (doc.payAmount > 9) {\r\n                    count = count - 20;\r\n                } else {\r\n                    if (doc.canReply == 0) {\r\n                        count = count + 20\r\n                    } else if (doc.lastMsgTimeStamp > twoDaysAgo) {\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n            const res = { count, list: profiles, lastDay: profileslastDay, lastHour: profileslastHour };\r\n            console.log(res)\r\n            return res;\r\n        } catch (error) {\r\n            console.log(error);\r\n            return { count: 1, list: [], lastDay: [], lastHour: [] };\r\n        }\r\n    }\r\n\r\n    async checkIfPaidToOthers(chatId: string): Promise<{ paid: string, demoGiven: string }> {\r\n        const resp = { paid: '', demoGiven: '' };\r\n        try {\r\n            const document = await this.db.find({ chatId, profile: { $exists: true, \"$ne\": `${process.env.dbcoll}` }, payAmount: { $gte: 10 } }).toArray();\r\n            const document2 = await this.db.find({ chatId, profile: { $exists: true, \"$ne\": `${process.env.dbcoll}` }, demoGiven: true }).toArray();\r\n            if (document.length > 0) {\r\n                document.map((doc: any) => {\r\n                    resp.paid = resp.paid + `@${this.clients[doc.profile]?.username}` + \", \";\r\n                })\r\n            }\r\n            if (document2.length > 0) {\r\n                document.map((doc: any) => {\r\n                    resp.demoGiven = resp.demoGiven + `@${this.clients[doc.profile]?.username}` + \", \";\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        return resp;\r\n    }\r\n\r\n    getClientFirstNames() {\r\n        const names = [];\r\n        for (const client in this.clients) {\r\n            if (client.toLowerCase() !== process.env.dbcoll.toLowerCase()) {\r\n                names.push(this.clients[client]?.dbcoll.toLowerCase())\r\n            }\r\n        }\r\n        return names;\r\n    }\r\n\r\n    async create(data: UserDataDto) {\r\n        const result = await this.db.findOne({ chatId: data.chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } });\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            const userData = { ...data, profile: `${process.env.dbcoll}` };\r\n            const result = await this.db.insertOne(userData);\r\n            console.log(`New userData created for: ${data.username} | ${data.chatId}`);\r\n            return result.insertedId;\r\n        }\r\n    }\r\n\r\n    async createOrUpdateStats(chatId: string, name: string, payAmount: number, newUser: boolean, demoGiven: boolean, paidReply: boolean, secondShow: boolean, didPay?: boolean) {\r\n        const filter = { chatId, client: process.env.clientId };\r\n        const chat = await this.statsDb.findOne(filter);\r\n        const chat2 = await this.statsDb2.findOne(filter);\r\n        if (chat) {\r\n            await this.statsDb.updateOne(filter, { $set: { count: chat.count + 1, payAmount: payAmount, didPay: didPay, demoGiven: demoGiven, paidReply, secondShow } });\r\n        } else {\r\n            await this.statsDb.insertOne({ chatId, count: 1, payAmount, demoGiven: demoGiven, demoGivenToday: false, newUser, name, secondShow, didPay: false, paidReply, client: process.env.clientId, profile: `${process.env.dbcoll}` });\r\n        }\r\n        if (chat2) {\r\n            await this.statsDb2.updateOne(filter, { $set: { count: chat2.count + 1, payAmount: payAmount, didPay: didPay, demoGiven: demoGiven, paidReply, secondShow } });\r\n        } else {\r\n            await this.statsDb2.insertOne({ chatId, count: 1, payAmount, demoGiven: demoGiven, demoGivenToday: false, newUser, paidReply, name, secondShow, didPay: false, client: process.env.clientId, profile: `${process.env.dbcoll}` });\r\n            const textedClientCount = await this.textedClientCount(chatId);\r\n            if (textedClientCount.lastHour.length > 2) {\r\n                setTimeout(async () => {\r\n                    await this.updateSingleKey(chatId, user.limitTime, Date.now() + (2 * 60 * 60 * 1000));\r\n                }, 20000);\r\n            }\r\n            const userDetail: UserDataDto = await this.read(chatId);\r\n            if (userDetail) {\r\n                if (userDetail?.payAmount > 20) {\r\n                    if (userDetail?.demoGiven) {\r\n                        await this.updateSingleKey(chatId, user.paidReply, true);\r\n                    } else {\r\n                        await this.updateSingleKey(chatId, user.paidReply, false);\r\n                    }\r\n                } else {\r\n                    await this.updateSingleKey(chatId, user.paidReply, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async updateStatSingleKey(chatId: string, mykey: string, value: any) {\r\n        const filter = { chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } };\r\n        await this.statsDb.updateOne(filter, { $set: { [mykey]: value } }, { upsert: true, returnDocument: 'after' });\r\n        await this.statsDb2.updateOne(filter, { $set: { [mykey]: value } }, { upsert: true, returnDocument: 'after' });\r\n    }\r\n\r\n    async delete(chatId: string) {\r\n        const result = await this.db.deleteMany({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } });\r\n    }\r\n\r\n    async read(chatId: string) {\r\n        const result = await this.db.findOne({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } });\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getAChannel(): Promise<string> {\r\n        const result = await this.promoteStatsDb.findOne({ client: process.env.clientId })\r\n        let lowestKey: string;\r\n        let lowestValue: number;\r\n        const data: Record<string, number> = result.data\r\n\r\n        for (const [key, value] of Object.entries(data.data)) {\r\n            if (lowestValue === null || value < lowestValue) {\r\n                lowestKey = key;\r\n                lowestValue = value;\r\n            }\r\n        }\r\n        return lowestKey;\r\n    };\r\n\r\n    async addTodaysChannels(data: string[]) {\r\n        const clientId = process.env.clientId;\r\n        const result = await this.promoteStatsDb.updateOne(\r\n            { client: clientId },\r\n            {\r\n                $set: {\r\n                    channels: data\r\n                },\r\n            },\r\n            { upsert: true }\r\n        );\r\n    }\r\n    async updatePromoteStats(channelName: string) {\r\n        try {\r\n            const clientId = process.env.clientId;\r\n            const existingDocument = await this.promoteStatsDb.findOne({ client: clientId });\r\n            let count = 0;\r\n            let data: Record<string, number> = {};\r\n            let totalCount = 0;\r\n\r\n            if (existingDocument) {\r\n                count = existingDocument.count + 1;\r\n                data = existingDocument.data;\r\n                totalCount = existingDocument.totalCount;\r\n            }\r\n\r\n            if (data[channelName]) {\r\n                data[channelName]++;\r\n            } else {\r\n                data[channelName] = 1;\r\n            }\r\n\r\n            totalCount++;\r\n            const uniqueChannels = Object.keys(data).length;\r\n            // const sortedDataEntries = Object.entries(data).sort((a, b) => b[1] - a[1]);\r\n            // const sortedData = Object.fromEntries(sortedDataEntries);\r\n\r\n            const result = await this.promoteStatsDb.updateOne(\r\n                { client: clientId },\r\n                {\r\n                    $set: {\r\n                        totalCount: totalCount,\r\n                        data: data,//sortedData,\r\n                        uniqueChannels: uniqueChannels,\r\n                        lastUpdatedTimeStamp: Date.now(),\r\n                        releaseDay: Date.now(),\r\n                        isActive: true\r\n                    },\r\n                },\r\n                { upsert: true }\r\n            );\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async activatePromotions() {\r\n        const clientId = process.env.clientId;\r\n        const result = await this.promoteStatsDb.updateOne(\r\n            { client: clientId },\r\n            {\r\n                $set: {\r\n                    releaseDay: Date.now(),\r\n                    isActive: true\r\n                },\r\n            },\r\n            { upsert: true }\r\n        );\r\n    }\r\n\r\n    async deactivatePromotions(day = Date.now()) {\r\n        const clientId = process.env.clientId;\r\n        const result = await this.promoteStatsDb.updateOne(\r\n            { client: clientId },\r\n            {\r\n                $set: {\r\n                    releaseDay: day,\r\n                    isActive: false\r\n                },\r\n            },\r\n            { upsert: true }\r\n        );\r\n    }\r\n\r\n    async readPromoteStats() {\r\n        const result = await this.promoteStatsDb.findOne({ \"client\": process.env.clientId });\r\n        return result;\r\n    }\r\n\r\n\r\n    async readPromoteStatsTime() {\r\n        const result = await this.promoteStatsDb.findOne({ \"client\": process.env.clientId }, { projection: { \"client\": 1, \"totalCount\": 1, \"lastUpdatedTimeStamp\": 1, \"isActive\": 1, \"_id\": 0 } });\r\n        return result;\r\n\r\n    }\r\n\r\n\r\n    async readstats() {\r\n        const result = await this.statsDb.find({ client: process.env.clientId }).sort({ newUser: -1 })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    async readstats2(): Promise<any[]> {\r\n        const result = await this.statsDb2.find({ client: process.env.clientId }).sort({ newUser: -1 })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async readstats2Opt(): Promise<any[]> {\r\n        return await this.statsDb2.aggregate([\r\n            { $match: { client: process.env.clientId } },\r\n            {\r\n                $group: {\r\n                    _id: null,\r\n                    totalCount: { $sum: \"$count\" },\r\n                    userCount: { $sum: 1 }\r\n                }\r\n            }\r\n        ]).toArray();\r\n    }\r\n\r\n    async getTodayPaidUsers(): Promise<{ total: number, new: number }> {\r\n        try {\r\n            const result = await this.statsDb2.find({ client: process.env.clientId, payAmount: { $gt: 10 } })\r\n            if (result) {\r\n                const res = await result.toArray();\r\n                let newUsers = 0\r\n                for (const u of res) {\r\n                    if (u.true) {\r\n                        newUsers++\r\n                    }\r\n                }\r\n                return ({ total: res.length || 0, new: newUsers || 0 });\r\n            } else {\r\n                return ({ total: 0, new: 0 });\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n            return ({ total: 0, new: 0 });\r\n        }\r\n    }\r\n\r\n    async checkIfPaidTodayToOthers(chatId: string) {\r\n        const result = await this.statsDb2.find({ chatId: chatId, client: { $ne: `${process.env.clientId}` } }).sort({ newUser: -1 })\r\n        if (result) {\r\n            const res = result.toArray();\r\n            if (res.length > 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async readSingleStats(chatId: string) {\r\n        const result = await this.statsDb.find({ chatId, client: process.env.clientId }).sort({ newUser: -1 })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async removeSingleStat(chatId: string) {\r\n        try {\r\n            const result = await this.statsDb.deleteMany({ chatId, profile: process.env.dbcoll });\r\n        } catch (error) {\r\n            console.log(\"Unable to delete\");\r\n        }\r\n    }\r\n\r\n    async readRecentPaidPpl() {\r\n        const result = await this.statsDb.find({ client: process.env.clientId, payAmount: { $gt: 26 } })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async readRecentPaidPpl2() {\r\n        const result = await this.statsDb2.find({ client: process.env.clientId, payAmount: { $gt: 25 } });\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async todayPaidPpl() {\r\n        const result = await this.statsDb2.find({ client: process.env.clientId, newUser: true, payAmount: { $gt: 25 } });\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getPaidList() {\r\n        let ppl = ''\r\n        const result = await this.db.find({ payAmount: { $gt: 26 } }).sort({ lastMsgTimeStamp: -1 }).limit(25).toArray();\r\n        if (result) {\r\n            result.forEach((element: any) => {\r\n                ppl = ppl + '\\n ' + element?.username + ' : ' + element?.paidCount + \"|\" + element?.payAmount;\r\n            });\r\n            return ppl;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    async getPaidListIds() {\r\n        let ppl = [];\r\n        const result = await this.db.find({ payAmount: { $gt: 26 } }).sort({ lastMsgTimeStamp: -1 }).limit(25).toArray();\r\n        if (result) {\r\n            result.forEach(async (element: UserDataDto) => {\r\n                const id = element?.username.startsWith(\"@\") ? element?.username : element?.chatId;\r\n                ppl.push({ userId: id, accessHash: element.accessHash, paidReply: element.paidReply, payAmount: element.payAmount });\r\n                // const chatId = element.chatId\r\n                // const result = await this.db.updateOne({ chatId }, { $set: { limitTime: Date.now() + (3 * 60 * 60 * 1000) } });\r\n            });\r\n            return ppl;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    // Update a UserDataDto in the database by chatId\r\n    async update(chatId: string, updates: UserDataDto) {\r\n        const result = await this.db.updateOne({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } }, { $set: { ...updates, lastMsgTimeStamp: Date.now() } }, { upsert: true, returnDocument: 'after' });\r\n    }\r\n\r\n    async resetUnpaid() {\r\n        const result = await this.db.updateMany({ \"_id\": { $lt: new ObjectId(\"63fca4730000000000000000\") }, \"paidCount\": { $gt: 0 }, \"payAmount\": 0 }, { $set: { paidCount: 0 } });\r\n        return result;\r\n    }\r\n\r\n    async resetPpl() {\r\n        const result = await this.db.updateMany({}, { $set: { paidReply: true } });\r\n        return result;\r\n    }\r\n\r\n    async remove(chatId: string) {\r\n        const result = await this.db.deleteMany({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } });\r\n    }\r\n\r\n    async getSingleKey(chatId: string, key: string) {\r\n        const result = await this.db.findOne({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } }, { projection: { [key]: 1 } });\r\n        if (result) {\r\n            return result[key];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    async updateSingleKey(chatId: string, key: string, value: any) {\r\n        const result = await this.db.updateOne({ chatId, profile: { $exists: true, $eq: `${process.env.dbcoll}` } }, { $set: { [key]: value, lastMsgTimeStamp: Date.now() } });\r\n    }\r\n\r\n    async getPromoteMsgs() {\r\n        try {\r\n            const channelDb = this.client.db(\"tgclients\").collection('promoteMsgs');\r\n            return await channelDb.findOne({})\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    async removeFromAvailableMsgs(filter: any, valueToRemove: string) {\r\n\r\n        try {\r\n\r\n            const result = await this.activeChannelDb.updateOne(\r\n                filter,\r\n                { $pull: { availableMsgs: valueToRemove } }\r\n            );\r\n\r\n            console.log(`${result.modifiedCount} document(s) updated.`);\r\n        } catch (error) {\r\n            console.error('Error occurred:', error);\r\n        }\r\n    }\r\n\r\n    async addToAvailableMsgs(filter: any, valueToAdd: string) {\r\n        try {\r\n\r\n            const result = await this.activeChannelDb.updateOne(\r\n                filter,\r\n                { $addToSet: { availableMsgs: valueToAdd } }\r\n            );\r\n\r\n            console.log(`${result.modifiedCount} document(s) updated.`);\r\n        } catch (error) {\r\n            console.error('Error occurred:', error);\r\n        }\r\n    }\r\n\r\n    // async getAvgCalculatedChannels() {\r\n    //     const channelStatsDb = this.client.db(\"tgclients\").collection('channelStats');\r\n    //     const results = await channelStatsDb.find({ averageCalculated: true }, { projection: { channelId: 1, _id: 0 } }).toArray();\r\n    //     const ids = [];\r\n    //     results.map(doc => {\r\n    //         ids.push(doc.channelId)\r\n    //     })\r\n    //     return ids;\r\n    // } \r\n\r\n    // async saveChannelStatsToDB(chatRequestCounts: { [chatId: string]: number }): Promise<void> {\r\n    //     try {\r\n    //         const channelStatsDb = this.client.db(\"tgclients\").collection('channelStats');\r\n    //         // Calculate the time 1 minutes ago\r\n    //         for (const chatId in chatRequestCounts) {\r\n    //             const channelId = chatId.replace(/^-100/, \"\")\r\n    //             const existingStats = await channelStatsDb.findOne({ channelId });\r\n    //             const oneMinutesAgo = new Date(Date.now() - 1 * 60 * 1000);\r\n\r\n    //             if (!existingStats || existingStats?.updatedAt <= oneMinutesAgo) {\r\n    //                 const requestCount: number = chatRequestCounts[chatId];\r\n    //                 const chatStats = await channelStatsDb.updateOne(\r\n    //                     { channelId },\r\n    //                     {\r\n    //                         $push: { requestCounts: requestCount },\r\n    //                         $set: { updatedAt: Date.now() }\r\n    //                     },\r\n    //                     { upsert: true }\r\n    //                 );\r\n    //             }\r\n    //             chatRequestCounts[chatId] = 0;\r\n\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    async updateActiveChannel(filter: any, data: any) {\r\n        const result = await this.activeChannelDb.updateOne(\r\n            filter,\r\n            {\r\n                $set: {\r\n                    ...data\r\n                },\r\n            },\r\n            { upsert: true }\r\n        );\r\n    }\r\n    async getChannel(filter: any) {\r\n        const channelDb = this.client.db(\"tgclients\").collection('channels');\r\n        const result: IChannel = <any>await channelDb.findOne(filter);\r\n        return result\r\n    }\r\n\r\n    async getActiveChannel(filter: any) {\r\n        const result: IChannel = <any>await this.activeChannelDb.findOne(filter);\r\n        return result\r\n    }\r\n\r\n    async removeOnefromActiveChannel(filter: any) {\r\n        try {\r\n            await this.activeChannelDb.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    async removeOnefromChannel(filter: any) {\r\n        try {\r\n            const channelDb = this.client.db(\"tgclients\").collection('channels');\r\n            await channelDb.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    async closeConnection() {\r\n        try {\r\n            if (this.isConnected) {\r\n                this.isConnected = false;\r\n                console.log('MongoDB connection closed.');\r\n            }\r\n            await this.client?.close();\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getRecentProfiles(data: UserDataDto[], time: number, expectedCount: number): UserDataDto[] {\r\n    const currentTime = Date.now();\r\n    const oldTime = currentTime - time;\r\n    const filteredData = data.filter(\r\n        item => {\r\n            const condition = ((item.lastMsgTimeStamp > oldTime) && (item.totalCount > expectedCount) && (item.payAmount < 10))\r\n            return (condition)\r\n        });\r\n\r\n    return filteredData;\r\n}\r\n","import axios, { AddressFamily, AxiosRequestConfig } from \"axios\";\r\nimport { parseError } from \"./parseError\";\r\nconst ppplbot = `https://api.telegram.org/bot6735591051:AAELwIkSHegcBIVv5pf484Pn09WNQj1Nl54/sendMessage?chat_id=${process.env.updatesChannel}`;\r\n\r\nexport async function fetchWithTimeout(resource: string, options: AxiosRequestConfig = {}, sendErr: boolean = true, maxRetries: number = 1) {\r\n    options.timeout = options.timeout || 50000;\r\n    options.method = options.method || 'GET';\r\n\r\n    const fetchWithProtocol = async (url: string, version: AddressFamily) => {\r\n        const source = axios.CancelToken.source();\r\n        const id = setTimeout(() => {\r\n            source.cancel(`Request timed out after ${options.timeout}ms`);\r\n        }, options.timeout);\r\n        const defaultHeaders = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n        const headers = { ...defaultHeaders, ...options.headers };\r\n        try {\r\n            const response = await axios({\r\n                headers,\r\n                ...options,\r\n                url,\r\n                cancelToken: source.token,\r\n                family: version\r\n            });\r\n            clearTimeout(id);\r\n            return response;\r\n        } catch (error) {\r\n            clearTimeout(id);\r\n            console.log(`Error at URL (IPv${version}): `, url);\r\n            if (axios.isCancel(error)) {\r\n                console.log('Request canceled:', error.message, url);\r\n                return undefined;\r\n            }\r\n            throw error; // Rethrow the error to handle retry logic outside\r\n        }\r\n    };\r\n\r\n    for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\r\n        try {\r\n            const responseIPv4 = await fetchWithProtocol(resource, 4);\r\n            if (responseIPv4) return responseIPv4;\r\n            const responseIPv6 = await fetchWithProtocol(resource, 6);\r\n            if (responseIPv6) return responseIPv6;\r\n        } catch (error: any) {\r\n            console.log(\"Error at URL : \", resource)\r\n            const errorDetails = parseError(error, undefined, false)\r\n            if (errorDetails.status.toString() !== '429' && error.code !== 'ERR_NETWORK' && error.code !== \"ECONNABORTED\" && error.code !== \"ETIMEDOUT\" && !errorDetails.message.toLowerCase().includes('too many requests') && !axios.isCancel(error)) {\r\n                if (retryCount < maxRetries) {\r\n                    console.log(`Retrying... (${retryCount + 1}/${maxRetries})`);\r\n                    await new Promise(resolve => setTimeout(resolve, 2000)); // 2 seconds delay\r\n                } else {\r\n                    console.log(`All ${maxRetries + 1} retries failed for ${resource}`);\r\n                    if (sendErr) {\r\n                        axios.get(`${ppplbot}&text=${encodeURIComponent(`HELPER :: All ${maxRetries + 1} retries failed for ${resource}\\n${errorDetails.message}`)}`)\r\n                    }\r\n                    return undefined;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","require('dotenv').config()\r\nimport express from 'express';\r\nimport { fetchWithTimeout } from './fetchWithTimeout';\r\nimport { UserDataDtoCrud } from './dbservice';\r\nimport TelegramManager from './TelegramManager';\r\nimport { parseError } from './parseError';\r\nimport { sendPing } from './connection';\r\n\r\nlet canTry2 = true;\r\nconst ppplbot = `https://api.telegram.org/bot6735591051:AAELwIkSHegcBIVv5pf484Pn09WNQj1Nl54/sendMessage?chat_id=${process.env.updatesChannel}`;\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\nexport const prcessID = Math.floor(Math.random() * 123);\r\nconsole.log(\"PRocessID: \", prcessID)\r\napp.use(express.json());\r\napp.get('/', (req, res) => {\r\n  res.send(\"Hello World\");\r\n})\r\napp.get('/sendtoall', (req, res, next) => {\r\n  res.send(`Sending ${req.query.query}`);\r\n  next()\r\n}, async (req, res) => {\r\n  const endpoint = <string>req.query.query;\r\n  await sendToAll(endpoint)\r\n});\r\n\r\napp.get('/getProcessId', async (req, res) => {\r\n  res.json({ ProcessId: prcessID.toString() });\r\n});\r\n\r\napp.get('/tryToConnect/:num', async (req, res, next) => {\r\n  res.send('OK');\r\n  next();\r\n}, async (req, res) => {\r\n  const receivePrcssId = parseInt(req.params?.num);\r\n  console.log(prcessID, 'Connect Req received from: ', receivePrcssId);\r\n  try {\r\n    if (canTry2) {\r\n      if (receivePrcssId === prcessID) {\r\n        // const isAlive = await fetchWithTimeout(`${ppplbot}&text=${(process.env.clientId).toUpperCase()}: Alive Check`);\r\n        // if (isAlive) {\r\n        await sleep(300);\r\n        if (sendPing === false) {\r\n          console.log('Trying to Initiate CLIENT');\r\n          canTry2 = false;\r\n          setTimeout(() => {\r\n            canTry2 = true;\r\n          }, 70000);\r\n          let canStart = true\r\n          for (let i = 0; i < 3; i++) {\r\n            // const resp = await fetchWithTimeout(`${ppplbot}&text=exit${process.env.username}`);\r\n            // if (resp) {\r\n            //   canStart = true;\r\n            //   break;\r\n            // }\r\n          }\r\n          await sleep(3000);\r\n          // await fetchWithTimeout(`${ppplbot}&text=exit${process.env.username}`);\r\n          if (canStart) {\r\n            // await fetchWithTimeout(`${ppplbot}&text=${(process.env.clientId).toUpperCase()}: Connecting.......!!`);\r\n            await startConn();\r\n          }\r\n          // } else {\r\n          //     await fetchWithTimeout(`${ppplbot}&text=${(process.env.clientId).toUpperCase()}: Pinging is Working`);\r\n          // }\r\n        } else {\r\n          console.log('Issue at sending Pings')\r\n        }\r\n      }\r\n      else {\r\n        console.log('SomeOther Unknown Process Exist');\r\n        await fetchWithTimeout(`${ppplbot}&text=${(process.env.clientId).toUpperCase()}: SomeOther Unknown Process Exist`);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    parseError(error);\r\n  }\r\n});\r\n\r\nasync function startConn() {\r\n  const userDataDtoCrud = UserDataDtoCrud.getInstance();\r\n  if (!userDataDtoCrud.isConnected) {\r\n    try {\r\n      const isConnected = await userDataDtoCrud.connect();\r\n      if (isConnected) {\r\n        await TelegramManager.getInstance().createClient();\r\n      } else {\r\n        console.log('Error While Connecting to DB=====', isConnected);\r\n      }\r\n    } catch (error) {\r\n      console.log('Error While Connecting to DB', error);\r\n    }\r\n  } else {\r\n    await TelegramManager.getInstance().createClient();\r\n  }\r\n}\r\n\r\napp.get('/exitPrimary', (req, res, next) => {\r\n  res.send(`exitting Primary`);\r\n  next()\r\n}, async (req, res) => {\r\n  const result = await fetchWithTimeout(`https://uptimechecker2.onrender.com/maskedcls`);\r\n  const clients = result?.data;\r\n  for (const client of clients) {\r\n    if (client.clientId.toLowerCase().includes('1')) {\r\n      await fetchWithTimeout(`${client.repl}/exit`);\r\n      await sleep(40000);\r\n    }\r\n  }\r\n});\r\n\r\n\r\napp.get('/exitSecondary', (req, res, next) => {\r\n  res.send(`exitting Secondary`);\r\n  next()\r\n}, async (req, res) => {\r\n  const result = await fetchWithTimeout(`https://uptimechecker2.onrender.com/maskedcls`);\r\n  const clients = result?.data;\r\n  for (const client of clients) {\r\n    if (client.clientId.toLowerCase().includes('2')) {\r\n      await fetchWithTimeout(`${client.repl}/exit`);\r\n      await sleep(40000);\r\n    }\r\n  }\r\n});\r\n\r\n\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\n\r\nasync function sendToAll(endpoint: string) {\r\n  const result = await fetchWithTimeout(`https://uptimechecker2.onrender.com/maskedcls`);\r\n  const clients = result?.data;\r\n  for (const client of clients) {\r\n    const url = `${client.repl}/${endpoint}`\r\n    console.log(\"Trying : \", url)\r\n    await fetchWithTimeout(url);\r\n    await sleep(500)\r\n  }\r\n}\r\n\r\nconst sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));\r\n","console.log(\"in MEssages\");\r\nexport const endpoint = `mode=02`//&mam=15\r\n\r\nexport let messages = {\r\n    assureMSgArray: [\r\n        \"I'm little busy now, I will call u in some time\",\r\n        'Oyee.... Now??',\r\n        'Oyee.... U there?',\r\n        \"Lets do now??\",\r\n        \"Are you free now??\",\r\n        \"Hey...Dont worry!! I will Call you pakka ok!!\",\r\n        \"Hey...Dont worry!! I will Call you pakka ok!!\",\r\n        'Sorry, wait a while!!Dont worry, I will call you!!',\r\n        \"I'm Outside now, I will only Call you in some time!\",\r\n        'Sorry for the delay, I will Call you when I have a moment',\r\n        'Can you please wait for a while? I will Call you after 1 hour',\r\n        \"I Just Came outside, I will only call u when I'm free!!\"\r\n    ],\r\n    thanksArray: [`Aww...Thanks Naughty Boii!! ♥️🙈👀 `,\r\n        `Thank youuu Dear!!♥️`,\r\n        'Haha... Thanks🙈',\r\n        `Thanks Baby🤗`,\r\n        '♥️🙈♥️🙈♥️🙈',\r\n        'Thanks a lot, dear! ❤️',\r\n        'Thank you so much, love! 😍',\r\n        'Thank you very much, sweetheart! 💖',\r\n        'Thank you, dearie! 🥰',\r\n        'Thank you, my dear! 😘',\r\n    ],\r\n    PayMsgArray: [\r\n        `Just **Pay Now**\\nNext Second itself..I will call nd SHOW you My BOOBs🙈🙈!!\\n`,\r\n        `**PAY** and **Message Me Dear!!**\\nI will do **Now Itself🤗**\\n`,\r\n        \"I'm ready and waiting! 😏\\nComplete the payment and message me. 😚\\n\",\r\n        \"Oyyy...Pay and Msg!\\nI'm ready to provide service 😚❤️\\n\",\r\n        \"I'm also ready now! 😏\\nPay and message me. 💸📩\\n\",\r\n        `**PAY** and **Message Me!**\\nI will do **Now Itself**\\n`,\r\n        \"Yeah, Do the Payment First!!\\nI'm Ready for Service!!❤️\\n\",\r\n        \"I'm ready now😏!!\\n** Pay and Msg me**\\n\"],\r\n    bye: `Byee!!`,\r\n    cantPay: `If You cant Pay Just **20₹** to a **Beautiful Girl** Like Me!! Never message me again and Waste your own Time!!`,\r\n    time: `Demo : 1 minute\\nFull service 1 hour\\n\\nFor any service you take!`,\r\n    wait: \"**I'm Checking Payments**, What is Your Name on Payment???\\n\\nWait... 5 Mins!!\\n\\n**Send your Payment Screenshot Once Now!!**\",\r\n    screenshot: `**Send ur  Payment Screenshot!!**`,\r\n    qr: '**\"PhonePe / PayTm\"  ONLY!!** 👆👆\\n',\r\n    qr1: 'Pay to this NEW QR Code!!',\r\n    demo: `\\n**DEMO** Nude pics: **25₹**\\n**DEMO** Video call: **50₹**\\n**DEMO** Voice call: **40₹**\\n\\n**Pay on My Website 👉🏻 ${process.env.link}**`,\r\n    noFreeDemo: `**No FREE Demos!!**`,\r\n    installments: 'You Can Take Video call in Installments!!\\n\\n**Like...Daily 15Mins!!So 4 days u can enjoy in Full video call.🤗🤗**',\r\n    daily100: `So Many **People** Msg me for **Free Demo😔**\\nI cant waste my time on **TimePassers!!**\\n\\nDemo **Video Call** is just **50₹!!**\\nTake **Full Service** Only If U like **Demo VC!!**\\n\\n**PAY nd Enjoy** me Like a **REAL MAN!!🔥❤️**\\nDont be a **TimePasser!!😏**`,\r\n    just50: `**Video Call** is just 👉🏻 **50₹!!**\\n\\nDont be a **TimePasser Baby!!😏**\\n**Pay nd Msg!!**`,\r\n    link: `\\n**Pay on my Website 👇👇\\n${process.env.link}**`,\r\n    dir: `OPEN 👉🏻 **${process.env.demolink}/${process.env.clientId}**`,\r\n    pricelist: `**Full Service**\\n\\nSex chat                     :  **150₹/-**\\n30 Full Nude Pics     :  **200₹**/-\\n7 Full Nude Videos   :  **400₹/-**\\nVoicecall sex             :   **350₹/-**\\n\\n**Full Nude Video call**  : **600₹/-**  (1 hour)`,\r\n    botArray: [`No, I'm using **Auto reply** option!!\\nDont worry I'm **Real girl** only!!`, `No Dear, Dont worry I'm **Real girl** only!!`, 'No Baby, I am Not!!'],\r\n    thanksNdPay: `**PAY** and **Msg Me!!**\\nI will Call you **Now Itself!\\n\\nOPEN 👉🏻 ${process.env.link}**`,\r\n    ntnw: `Not now,\\n**First take Online Service....🤗**\\nIf I like your Behaviour and If i get satisfied with your **Video Call**...😚😚\\nI will give you **My Address** and **NUMBER**.`,\r\n    doing: `**Giving service** to other BOY\\nHe PAID me just now`,\r\n    fine: \"I'm fine, you?\",\r\n    aut: \"Heyy!!\\n\\nAll the Above message are **AUTOMATIC SYSTEM Msgs**. Please ignore!!\",\r\n    okayPay: `okay!!\\n**Pay** and Msg me....**I'm Ready!!**`,\r\n    dp: `Sure okay......!!\\nYou See **All the Pics** in **My Profile**...!!\\n\\n**Pay for Demo**,I will send you more **Secret Pics**😜😜`,\r\n    allDp: `You See **All the Pics** in **My Profile**...!!\\n\\n**Pay for Demo**,I will send you more **Secret Pics**😜😜`,\r\n    notVirgin: \"No, I'm not virgin!!\",\r\n    age: `I'm 24yrs old`,\r\n    language: `I know telugu, hindi, english`,\r\n    notMarried: \"No, I'm not Married yet!!😜\",\r\n    number: '**Yes Okay**,\\n\\nPay and Message me!!\\nI will call now...!!',\r\n    study: \"I'm doing **M.Tech** now!!\",\r\n    greeting: `\\n\\nI'm ready to do **Full Nude Video Call, Phone Sex, I will Send my NUDE Pics and Videos**💵\\n\\n🟢 **DEMO** Nude pics: **25₹**\\n**🟢 DEMO** Video call: **50₹**\\n🟢 **DEMO** Voice call: **40₹**\\n\\n\\nI will make ur **Dick 🍆 Very HARD** that u will **Cumm** with **Full Satisfaction!!♥️🙈👀 **`,\r\n    nameGreet: `!!!** \\n\\nI'm **${process.env.name}**\\nAge: **24yrs**\\nFrom: **HYDERABAD**\\n\\nAll online **SEX SERVICES** AVAILABLE`,\r\n    channelLinks: `**My Website 👉🏻 ${process.env.link}\\nJOIN 👉🏻 @${process.env.channelLink}**`,\r\n    pp: `**Yes!!**\\n\\nIf u want more... Pay for the Demo!!`,\r\n    nmns: \"Pay and Msg!!\\n\\n**No MONEY? then No SERVICE!!\\n\\nDont WASTE your TIME,\\nI will not do Anything Without Money!!**\"\r\n}\r\nconst someMsg = `**Video Call** is JUST **50₹!!**\\nI will **Show Everything** to You!!\\n\\nDont be a **TimePasser!!😏**` + '\\n**Just TRY ONCE Dear...❤️❤️**'\r\nexport const randomMsg = [messages.demo, \"👀👀\", messages.just50, 'hmm👀', messages.just50, 'What do you do?', 'haaa', 'haaa❤️', '?', \"I'm mood now!!😔\", 'are you vigin?', 'Show Me your Dick!!', \"I'm Pressing my boobs now🙈\", 'Will you lick my pussy??🙈', 'Your Dick is Hard Now??🙈', 'You want to lick My nipples?🙈', 'Your Dick Size??', 'numb', 'numb', 'what are you doing?', 'Where are you from?', 'What do like Most in SEX👀', 'your age?', 'what?', 'You want to kiss my boobies?🙈', \"I'm not Wearing Dress now!!🙈\\nTake the Demo!!\", 'Hmm Okay❤️', \"qr\", ...messages.PayMsgArray, someMsg]\r\n\r\nexport function pickOneMsg(msgsArray: any[]) {\r\n    return (msgsArray[Math.floor(Math.random() * msgsArray.length)])\r\n}\r\n","import { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nconst notifbot = `https://api.telegram.org/bot5856546982:AAEW5QCbfb7nFAcmsTyVjHXyV86TVVLcL_g/sendMessage?chat_id=${process.env.notifChannel}`\r\n\r\nexport function parseError(\r\n    err: any,\r\n    prefix?: string,\r\n    sendErr: boolean = true\r\n) {\r\n    let status = 'UNKNOWN';\r\n    let message = 'An unknown error occurred';\r\n    let error = 'UnknownError';\r\n    prefix = `${process.env.clientId} - ${prefix ? prefix : \"\"}`\r\n\r\n    const extractMessage = (data: any) => {\r\n        if (Array.isArray(data)) {\r\n            const messages = data.map((item: any) => extractMessage(item));\r\n            return messages.filter((message) => message !== undefined).join(', ');\r\n        } else if (typeof data === 'string') {\r\n            return data;\r\n        } else if (typeof data === 'object' && data !== null) {\r\n            let resultString = ''\r\n            for (const key in data) {\r\n                const value = data[key]\r\n                if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\r\n                    resultString = resultString + data[key].join(', ');\r\n                } else {\r\n                    const result = extractMessage(value);\r\n                    if (result) {\r\n                        resultString = resultString + result;\r\n                    }\r\n                }\r\n            }\r\n            return resultString\r\n        }\r\n        return JSON.stringify(data);\r\n    };\r\n\r\n    if (err.response) {\r\n        console.log(\"Checking in response\")\r\n        const response = err.response;\r\n        status =\r\n            response.data?.status ||\r\n            response.status ||\r\n            err.status ||\r\n            'UNKNOWN';\r\n        message =\r\n            response.data?.message ||\r\n            response.data?.errors ||\r\n            response.message ||\r\n            response.statusText ||\r\n            response.data ||\r\n            err.message ||\r\n            'An error occurred';\r\n        error =\r\n            response.data?.error ||\r\n            response.error ||\r\n            err.name ||\r\n            err.code ||\r\n            'Error';\r\n    } else if (err.request) {\r\n        console.log(\"Checking in request\")\r\n        status = err.status || 'NO_RESPONSE';\r\n        message = err.data?.message ||\r\n            err.data?.errors ||\r\n            err.message ||\r\n            err.statusText ||\r\n            err.data ||\r\n            err.message || 'The request was triggered but no response was received';\r\n        error = err.name || err.code || 'NoResponseError';\r\n    } else if (err.message) {\r\n        console.log(\"Checking in error\")\r\n        status = err.status || 'UNKNOWN';\r\n        message = err.message;\r\n        error = err.name || err.code || 'Error';\r\n    } else if (err.errorMessage) {\r\n        status = err.status || 'UNKNOWN';\r\n        message = err.errorMessage;\r\n        error = err.name || err.code || 'Error';\r\n    }\r\n\r\n    const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\r\n\r\n    const resp = { status, message: msg, error };\r\n    console.log(resp);\r\n    if (sendErr && !msg.includes(\"INPUT_USER_DEACTIVATED\")) {\r\n        fetchWithTimeout(`${notifbot}&text=${resp.message}`);\r\n    }\r\n    return resp\r\n}","import {\r\n    defaultMessages, defaultReactions,\r\n    selectRandomElements\r\n} from \"./utils\";\r\nimport { TelegramClient, Api } from \"telegram\";\r\nimport { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nimport { parseError } from \"./parseError\";\r\nimport { SendMessageParams } from \"telegram/client/messages\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { UserDataDtoCrud } from \"./dbservice\";\r\nimport { getEntity } from \"telegram/client/users\";\r\nimport TelegramManager from \"./TelegramManager\";\r\nimport { messages } from \"./messages\";\r\n\r\n\r\nexport interface IChannel {\r\n    channelId: string;\r\n    title: string;\r\n    participantsCount: number;\r\n    username: string;\r\n    restricted: boolean;\r\n    broadcast: boolean;\r\n    sendMessages: boolean;\r\n    canSendMsgs: boolean;\r\n    wordRestriction?: number;\r\n    dMRestriction?: number;\r\n    availableMsgs?: string[];\r\n    banned?: boolean;\r\n    reactions:string[],\r\n    reactRestricted: boolean\r\n}\r\n\r\n\r\nlet promoteCount = 0;\r\nlet promoting = false;\r\nlet promoteFlagCount = 0;\r\nlet promoteMsgs = {};\r\nlet promotedCount = 0\r\nlet lastMessageTime = Date.now();\r\nexport const myChannels: Map<string, IChannel> = new Map();\r\n\r\nconst notifbot = `https://api.telegram.org/bot5856546982:AAEW5QCbfb7nFAcmsTyVjHXyV86TVVLcL_g/sendMessage?chat_id=${process.env.notifChannel}`\r\nconst ppplbot = `https://api.telegram.org/bot6735591051:AAELwIkSHegcBIVv5pf484Pn09WNQj1Nl54/sendMessage?chat_id=${process.env.updatesChannel}`\r\n\r\nexport function logDetails(level, message, details = {}) {\r\n    const timestamp = new Date().toISOString();\r\n    console.log(`[${timestamp}] [${level}] ${message}`, details);\r\n}\r\n\r\nasync function fetchDialogs(client: TelegramClient) {\r\n    const channelIds = [];\r\n    try {\r\n        const dialogs = await client.getDialogs({ limit: 500 });\r\n        console.log(\"Dialogs : \", dialogs.length)\r\n        const unreadUserDialogs = [];\r\n        for (const dialog of dialogs) {\r\n            if (dialog.isUser && dialog.unreadCount > 0) {\r\n                unreadUserDialogs.push(dialog);\r\n            } else if (dialog.isChannel || dialog.isGroup) {\r\n                const chatEntity = <Api.Channel>dialog.entity.toJSON();\r\n                const { id, defaultBannedRights, title, broadcast, username, participantsCount, restricted } = chatEntity;\r\n                if (!broadcast && !defaultBannedRights?.sendMessages && !restricted && id && participantsCount > 500) {\r\n                    const channelId = id.toString().replace(/^-100/, \"\");\r\n                    channelIds.push(channelId)\r\n                }\r\n            }\r\n        }\r\n\r\n        // const result = await db.getActiveChannels({ channelId: { $in: channelIds } })\r\n        // console.log(\"Channels Set : \", channels.length)\r\n        replyUnread(client, unreadUserDialogs);\r\n    } catch (error) {\r\n        parseError(error, \"Failed to fetch channels while promoting\");\r\n        await startNewUserProcess(error);\r\n    }\r\n    return channelIds;\r\n}\r\n\r\nexport async function getChannelInfo(channelId: string) {\r\n    const db = UserDataDtoCrud.getInstance();\r\n    let channelInfo = myChannels.get(channelId);\r\n    if (!channelInfo) {\r\n        const dbChannel = await db.getActiveChannel({ channelId: channelId });\r\n        if (dbChannel) {\r\n            // console.log(\"Setting Channel at reactions : \", dbChannel.reactions);\r\n            channelInfo = dbChannel;\r\n            myChannels.set(channelId, channelInfo)\r\n        } else {\r\n            const data = await getIChannelFromTg(channelId);\r\n            await db.updateActiveChannel({ channelId: channelId }, data);\r\n            channelInfo = data;\r\n            myChannels.set(channelId, { ...data, reactions: defaultReactions })\r\n        }\r\n    }\r\n    return channelInfo\r\n}\r\n\r\nexport async function PromoteToGrp(client) {\r\n    promoteCount++;\r\n    logDetails(\"INFO\", `promoteFlagCount: ${promoteFlagCount} || promoting : ${promoting}`);\r\n\r\n    // if (client && !promoting && client.connected) {\r\n    //     promoting = true;\r\n    //     setInterval(async () => {\r\n    //         lastMessageTime = Date.now();\r\n    //         const db = UserDataDtoCrud.getInstance();\r\n    //         await db.updatePromoteStats('promote');\r\n    //     }, 200000)\r\n    // }\r\n    if (client && !promoting && client.connected) {\r\n        promoteFlagCount = 0;\r\n        promoting = true;\r\n        promoteCount = 0;\r\n        lastMessageTime = Date.now();\r\n        const db = UserDataDtoCrud.getInstance();\r\n        await db.updatePromoteStats('promote');\r\n\r\n        try {\r\n\r\n            const paidUserStats = await db.getTodayPaidUsers();\r\n            if ((paidUserStats?.total > 33) || (paidUserStats?.new > 15)) {\r\n                parseError({ message: \"Not Proceeding With Promotion as Limit Reached for the day!!\" }, \"Promotions Stopped\");\r\n                await db.deactivatePromotions();\r\n            } else {\r\n                const channelIds = await fetchDialogs(client);\r\n                logDetails(\"INFO\", `STARTED GROUP PROMOTION: LastTime - ${promotedCount} - ${channelIds.length}`);\r\n\r\n                const promotedStats = await db.readPromoteStats();\r\n                promoteMsgs = await db.getPromoteMsgs();\r\n                promotedCount = 0;\r\n\r\n                let channelIndex = 0;\r\n\r\n                for (const channelId of channelIds) {\r\n                    if (!client.connected) {\r\n                        await client.connect();\r\n                    }\r\n                    if (channelIndex >= channelIds.length || promoteCount > 2) {\r\n                        promoting = false;\r\n                        logDetails(\"WARN\", \"Force restarting promotions\");\r\n                        setTimeout(async () => {\r\n                            await fetchWithTimeout(`${process.env.repl}/promote`);\r\n                        }, 10000);\r\n                        break;\r\n                    }\r\n\r\n                    // logDetails(\"INFO\", `TringChannel : ${channel.title} || promoteFlagCount: ${promoteFlagCount}`);\r\n                    try {\r\n                        if (promoteFlagCount > 3) {\r\n                            promoting = false;\r\n                            // logDetails(\"INFO\", `Inside ForceStop`);\r\n                            await fetchWithTimeout(`${ppplbot}&text=@${process.env.clientId.toUpperCase()}: PROMOTIONS STOPPED Forcefully to restart again`);\r\n                            await db.deactivatePromotions();\r\n                            if (promotedStats?.releaseDay < Date.now()) {\r\n                                await checktghealth(client);\r\n                            }\r\n                            await fetchWithTimeout(`${notifbot}&text=@${process.env.clientId.toUpperCase()}: Failed - ${promoteFlagCount} | BROKE PROMOTION`);\r\n                            promoting = false;\r\n                            break;\r\n                        }\r\n                        // logDetails(\"INFO\", `Proceeding to Message`);\r\n                        await sendPromotionalMessage(channelId, client, false, 0);\r\n                    } catch (error) {\r\n                        logDetails(\"ERROR\", `FAILED: ${channelId?.title}`, { error: error.errorMessage });\r\n                    }\r\n                }; // Adjust the interval as needed\r\n            }\r\n            logDetails(\"INFO\", \"STARTED PROMOTION!!\");\r\n        } catch (error) {\r\n            parseError(error, \"Promotion Broke: \");\r\n            if (error.errorMessage?.toString().includes('AUTH_KEY_DUPLICATED')) {\r\n                await fetchWithTimeout(`${notifbot}&text=@${process.env.clientId.toUpperCase()}: AUTH KEY DUPLICATED`);\r\n            }\r\n        }\r\n        finally {\r\n            // if (promoteCount <= 2) {\r\n            //     await fetchWithTimeout(`${ppplbot}&text=@${process.env.clientId.toUpperCase()}: PROMOTIONS STOPPED Forcefully to restart again`);\r\n            // }\r\n        }\r\n    } else {\r\n        logDetails(\"INFO\", \"EXISTING PROMOTION!!\");\r\n        if (lastMessageTime < Date.now() - 7 * 60 * 1000) {\r\n            promoting = false;\r\n            setTimeout(() => {\r\n                PromoteToGrp(client);\r\n            }, 10000);\r\n        }\r\n        const db = UserDataDtoCrud.getInstance();\r\n        const userPromoteStats = await db.readPromoteStatsTime();\r\n        if (userPromoteStats?.isActive && promoteCount > 2 && (Date.now() - userPromoteStats?.lastUpdatedTimeStamp) / (1000 * 60) > 12) {\r\n            await fetchWithTimeout(`${ppplbot}&text=@${process.env.clientId.toUpperCase()}: EXITING AS ERROR AT PROMOTIONS`);\r\n            // process.exit(1);\r\n        }\r\n    }\r\n}\r\n\r\nasync function sendPromotionalMessage(channelId: string, client: TelegramClient, isLatest, promotedStats = 0) {\r\n    try {\r\n        const db = UserDataDtoCrud.getInstance();\r\n\r\n        const greetings = ['Hellloooo', 'Hiiiiii', 'Oyyyyyy', 'Oiiiii', 'Haaiiii', 'Hlloooo', 'Hiiii', 'Hyyyyy', 'Oyyyyye', 'Oyeeee', 'Heyyy'];\r\n        const emojis = generateEmojis();\r\n        const randomEmoji = getRandomEmoji();\r\n        const hour = getCurrentHourIST();\r\n        const isMorning = (hour > 9 && hour < 22);\r\n        const offset = Math.floor(Math.random() * 3);\r\n        const endMsgOptions = ['U bussy👀?', \"I'm Available!!😊💦\", 'Try Once!!😊💦', 'Waiting for your message... Dr!!💦', 'You Online?👀', \"I'm Available!!😊\", 'You Busy??👀💦', 'You Interested??👀💦', 'You Awake?👀💦', 'You there???💦💦'];\r\n        const endMsg = selectRandomElements(endMsgOptions, 1)[0];\r\n        const msg = `**${selectRandomElements(greetings, 1)[0]}_._._._._._._!!**${emojis}\\n.\\n.\\n**${endMsg}**`;\r\n\r\n        const addon = (offset !== 1) ? `${(offset === 2) ? `**\\n\\n\\nTODAY's OFFER:\\n-------------------------------------------\\nVideo Call Demo Available${randomEmoji}${randomEmoji}\\nVideo Call Demo Available${randomEmoji}${randomEmoji}\\n-------------------------------------------**` : `**\\n\\nJUST Try Once!!😚😚\\nI'm Free Now!!${generateEmojis()}**`}` : `${generateEmojis()}`;\r\n\r\n        const channelInfo = await getChannelInfo(channelId)\r\n        console.log(\"fetched ChannelInfo :\", channelInfo.banned)\r\n        if (!channelInfo?.banned) {\r\n            console.log(`${channelInfo?.title} - WordRestriction: ${channelInfo?.wordRestriction} | AvailableMsgsLength: ${channelInfo?.availableMsgs?.length}`);\r\n\r\n            if (!channelInfo?.availableMsgs) {\r\n                await db.updateActiveChannel({ channelId: channelInfo.channelId }, { dMRestriction: 0, wordRestriction: 0, availableMsgs: defaultMessages });\r\n                channelInfo.availableMsgs = defaultMessages;\r\n            }\r\n\r\n            let message;\r\n            let defaultMsg = false;\r\n\r\n            if (channelInfo.wordRestriction === 0) {\r\n                message = await sendMessageToChannel(client, channelInfo, { message: msg + addon });\r\n            } else {\r\n                let randomAvailableMsg;\r\n                if (channelInfo.availableMsgs.length > 0) {\r\n                    randomAvailableMsg = promoteMsgs[selectRandomElements(channelInfo.availableMsgs, 1)[0]];\r\n                } else {\r\n                    randomAvailableMsg = promoteMsgs[\"0\"];\r\n                    defaultMsg = true;\r\n                }\r\n                message = await sendMessageToChannel(client, channelInfo, { message: randomAvailableMsg });\r\n            }\r\n            if (message) {\r\n                await broadcast(`SENT TO GROUP: ${channelInfo?.title}`, `  @${channelInfo.username}  : ${channelInfo.participantsCount}`);\r\n                promoteFlagCount = 0;\r\n                promotedCount++;\r\n                retryMessageSending(client, channelInfo, message?.id, undefined, false, defaultMsg);\r\n                scheduleFollowUpMessage(client, channelInfo);\r\n                const outerLimit = 180000;\r\n                await sleep(outerLimit)\r\n                return;\r\n            } else {\r\n                await broadcast(`FAILED SEND IN GROUP: ${channelInfo?.title}`, `  @${channelInfo.username}  : ${channelInfo.participantsCount}`);\r\n                return;\r\n            }\r\n        } else {\r\n            console.log(\"Banned Channel\")\r\n        }\r\n    } catch (error) {\r\n        console.error(`Error sending promotional message to ${channelId}:`, error);\r\n        promoteFlagCount++;\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(true);\r\n            }, 4000);\r\n        });\r\n    }\r\n}\r\nfunction scheduleFollowUpMessage(client: TelegramClient, channelInfo: IChannel) {\r\n    const innerLimit = 200500;\r\n    setTimeout(async () => {\r\n        // console.log('Second timeout completed');\r\n\r\n        let followUpMsg;\r\n        let defaultMsg2 = false;\r\n\r\n        await broadcast(`SENDING Follow-up MESSAGE: ${channelInfo?.title}`, `  @${channelInfo.username}  : ${channelInfo.participantsCount}`);\r\n\r\n        if (channelInfo.wordRestriction === 0) {\r\n            // console.log('Sending default follow-up message');\r\n            followUpMsg = await sendMessageToChannel(client, channelInfo, { message: `**I have One Doubt.....!!\\n\\nCan Anyone Clarify me Please??😭😭${generateEmojis()}**` });\r\n        } else {\r\n            let randomAvailableMsg = promoteMsgs[selectRandomElements(channelInfo.availableMsgs, 1)[0]];\r\n\r\n            if (!(channelInfo.availableMsgs.length > 0 && randomAvailableMsg)) {\r\n                // console.log('No available messages, using default message');\r\n                randomAvailableMsg = promoteMsgs[\"0\"];\r\n                defaultMsg2 = true;\r\n            }\r\n\r\n            // console.log('Sending follow-up message from available messages');\r\n            followUpMsg = await sendMessageToChannel(client, channelInfo, { message: randomAvailableMsg });\r\n        }\r\n\r\n        if (followUpMsg) {\r\n            await broadcast(`Follow-up message SENT TO GROUP: ${channelInfo?.title}`, `  @${channelInfo.username}  : ${channelInfo.participantsCount}`);\r\n        } else {\r\n            await broadcast(`FAILED to send follow-up message IN GROUP: ${channelInfo?.title}`, `  @${channelInfo.username}  : ${channelInfo.participantsCount}`);\r\n        }\r\n\r\n        retryMessageSending(client, channelInfo, followUpMsg?.id, 10000, true, defaultMsg2);\r\n    }, innerLimit);\r\n\r\n}\r\n\r\n\r\nexport async function sendMessageToChannel(client: TelegramClient, channelInfo: IChannel, message: SendMessageParams) {\r\n    try {\r\n        // Attempt to send the message to the specified channel\r\n        const msg = await client.sendMessage(channelInfo.channelId, message);\r\n        lastMessageTime = Date.now();\r\n        return msg;\r\n    } catch (error) {\r\n        console.log(`Error sending message to ${channelInfo.channelId}:`, error);\r\n        if (error.errorMessage === \"CHANNEL_PRIVATE\") {\r\n            return await handlePrivateChannel(client, channelInfo, message, error);\r\n        } else {\r\n            return await handleOtherErrors(client, channelInfo, message, error);\r\n        }\r\n    }\r\n}\r\n\r\nasync function handlePrivateChannel(client: TelegramClient, channelInfo: IChannel, message: SendMessageParams, error: any) {\r\n    const db = UserDataDtoCrud.getInstance();\r\n    if (channelInfo && channelInfo.username) {\r\n        try {\r\n            // Attempt to send the message using the channel's username\r\n            return await client.sendMessage(channelInfo.username, message);\r\n        } catch (err) {\r\n            console.error(`Error retrying message for private channel ${channelInfo.username}:`, err);\r\n            if (err.errorMessage === \"CHANNEL_PRIVATE\") {\r\n                await db.updateActiveChannel({ channelId: channelInfo.channelId }, { banned: true });\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nasync function handleOtherErrors(client: TelegramClient, channelInfo: IChannel, message: SendMessageParams, error: any) {\r\n    const db = UserDataDtoCrud.getInstance();\r\n    console.log(`Error sending message to ${channelInfo.channelId} (@${channelInfo.username}):`, error);\r\n    //TODO\r\n    // if (error.errorMessage === 'USER_BANNED_IN_CHANNEL') {\r\n    //     const result = await checktghealth(client);\r\n    //     if (!result && daysLeftForRelease() < 0) {\r\n    //         await leaveChannel(client, channelInfo);\r\n    //     }\r\n    // } else if (error.errorMessage === 'CHAT_WRITE_FORBIDDEN') {\r\n    //     await leaveChannel(client, channelInfo);\r\n    // }\r\n    return undefined;\r\n}\r\n\r\nasync function checkAndResendMessage(client: TelegramClient, chat: IChannel, messageId: number,\r\n    randomMsgId: string, attemptCount: number,\r\n    waitTime: number = 15000, recursionCount: number = 0, isDoubtMessage: boolean = false): Promise<number> {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(async () => {\r\n            try {\r\n                if (!client.connected) {\r\n                    await client.connect()\r\n                }\r\n                const messageContent = randomMsgId ? promoteMsgs[randomMsgId] : promoteMsgs[\"0\"];\r\n                const db = UserDataDtoCrud.getInstance();\r\n\r\n                // Update word restriction if necessary\r\n                if (!isDoubtMessage && (attemptCount > chat.wordRestriction || chat.wordRestriction === undefined)) {\r\n                    await db.updateActiveChannel({ channelId: chat.channelId }, { ...chat, wordRestriction: attemptCount });\r\n                }\r\n\r\n                // Update DM restriction if necessary\r\n                if (isDoubtMessage && (attemptCount > chat.dMRestriction || chat.dMRestriction === undefined)) {\r\n                    await db.updateActiveChannel({ channelId: chat.channelId }, { ...chat, dMRestriction: attemptCount });\r\n                }\r\n\r\n                let sentMessage;\r\n                try {\r\n                    const messages = await client.getMessages(chat.channelId, { ids: messageId });\r\n                    sentMessage = messages[0];\r\n                } catch (error) {\r\n                    console.error(`Error fetching sent message:`, error);\r\n                }\r\n\r\n                if (!sentMessage) {\r\n                    await handleDeletedMessage(client, chat, messageId, randomMsgId, attemptCount);\r\n                    const msg = await sendMessageToChannel(client, chat, { message: messageContent });\r\n                    resolve(msg?.id);\r\n                } else {\r\n                    await handleExistingMessage(chat, randomMsgId);\r\n                    resolve(undefined);\r\n                }\r\n            } catch (error) {\r\n                console.error(`Error checking and resending message:`, error);\r\n                if (error.seconds && recursionCount < 3) {\r\n                    resolve(await checkAndResendMessage(client, chat, messageId, randomMsgId, attemptCount, error.seconds * 1000, recursionCount + 1, isDoubtMessage));\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            }\r\n        }, waitTime);\r\n    });\r\n}\r\n\r\n\r\nasync function handleDeletedMessage(client: TelegramClient, chat: IChannel, messageId: number, randomMsgId: string, attemptCount: number) {\r\n    const db = UserDataDtoCrud.getInstance();\r\n    await broadcast(`MESSGAE DELETED FROM GROUP ===: ${chat.title}`, `@${chat.username}: ${chat.participantsCount}`);\r\n    await fetchWithTimeout(`${notifbot}&text=${encodeURIComponent(`${process.env.clientId?.toUpperCase()}: attempt=${attemptCount} R=${randomMsgId}\\n@${chat.username}`)}`);\r\n    if (randomMsgId) {\r\n        await db.removeFromAvailableMsgs({ channelId: chat.channelId }, randomMsgId);\r\n        if (randomMsgId === '0') {\r\n            await db.updateActiveChannel({ channelId: chat.channelId }, { banned: true });\r\n        }\r\n    } else if (chat.availableMsgs.length === 0 || attemptCount === 3) {\r\n        await db.updateActiveChannel({ channelId: chat.channelId }, { banned: true });\r\n    }\r\n}\r\n\r\nasync function handleExistingMessage(chat: IChannel, randomMsgId: string) {\r\n    const db = UserDataDtoCrud.getInstance();\r\n    await broadcast(`MESSAGE EXISTS, All GOOD === : ${chat.title}`, `@${chat.username}: ${chat.participantsCount}`);\r\n    await db.updatePromoteStats(chat.username);\r\n    if (randomMsgId) {\r\n        await db.addToAvailableMsgs({ channelId: chat.channelId }, randomMsgId);\r\n    } else {\r\n        await db.addToAvailableMsgs({ channelId: chat.channelId }, \"0\");\r\n    }\r\n}\r\n\r\nasync function retryMessageSending(client: TelegramClient, chat: IChannel, messageId: number, waitTime: number = 8000, isDoubtMessage: boolean = false, isDefaultMessage: boolean) {\r\n    const availableMessages = [...chat.availableMsgs];\r\n    let nextMessageId = messageId;\r\n    for (let attempt = 0; attempt < 4; attempt++) {\r\n        if (nextMessageId) {\r\n            const randomMsgId = selectRandomElements(availableMessages, 1)[0];\r\n            const index = availableMessages.indexOf(randomMsgId);\r\n            if (index !== -1) {\r\n                availableMessages.splice(index, 1);\r\n            }\r\n            await sleep(waitTime);\r\n            nextMessageId = await checkAndResendMessage(client, chat, nextMessageId, randomMsgId, attempt, 1500, 0, isDoubtMessage);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getRandomEmoji(): string {\r\n    const eroticEmojis: string[] = [\"🔥\", \"💋\", \"👅\", \"🍆\", \"🔥\", \"💋\", \" 🙈\", \"👅\", \"🍑\", \"🍆\", \"💦\", \"🍑\", \"😚\", \"😏\", \"💦\", \"🥕\", \"🥖\"];\r\n    const randomIndex = Math.floor(Math.random() * eroticEmojis.length);\r\n    return eroticEmojis[randomIndex];\r\n}\r\n\r\nfunction generateEmojis(): string {\r\n    const emoji1 = getRandomEmoji();\r\n    const emoji2 = getRandomEmoji();\r\n    return emoji1 + emoji2;\r\n}\r\n\r\nfunction getCurrentHourIST(): number {\r\n    const now = new Date();\r\n    const istOffset = 5.5 * 60 * 60 * 1000;\r\n    const istTime = new Date(now.getTime() + istOffset);\r\n    const istHour = istTime.getUTCHours();\r\n    return istHour;\r\n}\r\n\r\nexport async function broadcast(name: string, msg: string) {\r\n    const now = new Date().toLocaleString('en-IN').split(',')[1]\r\n    console.log(`${now}||${name} : ${msg}`);\r\n}\r\n\r\nexport async function replyUnread(client: TelegramClient, unreadUserDialogs: any) {\r\n    if (client) {\r\n        try {\r\n            const db = UserDataDtoCrud.getInstance();\r\n            for (const chat of unreadUserDialogs) {\r\n                try {\r\n                    const userDetails = await db.read(chat.id.toString());\r\n                    if (userDetails) {\r\n                        if (userDetails.payAmount > 29) {\r\n                            if (!userDetails.demoGiven) {\r\n                                // const didPaidToOthers = await db.checkIfPaidToOthers(chat.id.toString());\r\n                                // if (didPaidToOthers.paid !== \"\" || didPaidToOthers.paid !== \"\") {\r\n                                //     await client.sendMessage(chat.entity,{ message: `Wait...\\nI'm verifying your Payment again!!\\n${didPaidToOthers.paid !== \"\" ? (`I think U paid to ${didPaidToOthers.paid} and U also`) : \"I think U\"}  ${didPaidToOthers.demoGiven !== \"\" ? (` took Demo from ${didPaidToOthers.demoGiven}`) : \"\"}` });\r\n                                // } else {\r\n                                await client.sendMessage(chat.entity, { message: \"Dont Speak Okay!!\\nI'm in **Bathroom**\\nMute yourself!! I will show you Okay..!!\" });\r\n                                await client.sendMessage(chat.entity, { message: `Hey U can Call me here\\n\\nhttps://zomCall.netlify.app/${process.env.clientId}/${userDetails.chatId.toString()}\\n\\nCall me now!!` });\r\n                                // }\r\n                            } else {\r\n                                if (userDetails.payAmount > 50) {\r\n                                    if (!userDetails.secondShow || userDetails.payAmount > 180) {\r\n                                        // await client.sendMessage(chat.entity,{ message: \"Mute ok.. I Will Call now!!\" });\r\n                                    } else if (userDetails.payAmount < 201) {\r\n                                        await client.sendMessage(chat.entity, { message: \"**Did you like the full Show??**😚\" });\r\n                                        setTimeout(async () => {\r\n                                            await client.sendMessage(chat.entity, { message: \"**30 Mins VideoCall   :  350₹/-\\n1 hour Full   :   600₹/-**\" });\r\n                                        }, 3000)\r\n                                    }\r\n                                } else {\r\n                                    await client.sendMessage(chat.entity, { message: \"**Did you like the Demo??😚\\n\\nPay Again!! if You want More....**\" });\r\n                                    setTimeout(async () => {\r\n                                        await client.sendMessage(chat.entity, { message: `**Take Full Show Baby...!!**\\nPussy also!!\\n\\nWithout Face : **100₹**\\nWith Face      : **150₹**` });\r\n                                    }, 3000)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (userDetails.payAmount > 15) {\r\n                                await client.sendMessage(chat.entity, { message: messages.noFreeDemo + \"\\n\\n\" + messages.demo })\r\n                            } else if (userDetails.payAmount > 10 && userDetails.picsSent) {\r\n                                await client.sendMessage(chat.entity, { message: `I have sent you Pics for your money\\n${messages.just50}` })\r\n                            } else {\r\n                                await client.sendMessage(chat.entity, { message: selectRandomElements([\"oyee..\", \"oye\", \"haa\", \"hmm\", \"??\", \"hey\"], 1)[0] })\r\n                            }\r\n                        }\r\n                        await client.markAsRead(chat.entity);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error);\r\n                    return new Promise((resolve) => {\r\n                        setTimeout(() => resolve(true), 5000)\r\n                    });\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error.errorMessage);\r\n            try {\r\n                if (error.errorMessage === 'AUTH_KEY_DUPLICATED') {\r\n                    await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: AUTH KEY DUPLICATED`);\r\n                }\r\n                if ((error.errorMessage === \"USER_DEACTIVATED_BAN\" || error.errorMessage === \"USER_DEACTIVATED\") && error.errorMessage !== \"INPUT_USER_DEACTIVATED\") {\r\n                    await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: USER_DEACTIVATED - STARTED NEW USER PROCESS`);\r\n                    const url = `${process.env.tgmanager}/clients/setupClient/${process.env.clientId}?a=no`;\r\n                    await fetchWithTimeout(url);\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function startNewUserProcess(error: any) {\r\n    if (error.errorMessage === 'AUTH_KEY_DUPLICATED') {\r\n        await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: AUTH KEY DUPLICATED`);\r\n    }\r\n    if ((error.errorMessage === \"USER_DEACTIVATED_BAN\" || error.errorMessage === \"USER_DEACTIVATED\") && error.errorMessage !== \"INPUT_USER_DEACTIVATED\") {\r\n        await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: USER_DEACTIVATED - STARTED NEW USER PROCESS`);\r\n        const url = `${process.env.tgmanager}/clients/clients/setupClient/${process.env.clientId}?archiveOld=false&formalities=false`;\r\n        await fetchWithTimeout(url);\r\n    }\r\n}\r\n\r\nasync function checktghealth(client: TelegramClient) {\r\n    try {\r\n        if (client) {\r\n            await client.sendMessage('@spambot', { message: '/start' })\r\n        } else {\r\n            console.log(\"instanse not exist\")\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n        try {\r\n            await client.invoke(\r\n                new Api.contacts.Unblock({\r\n                    id: '178220800'\r\n                })\r\n            );\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: Failed To Check Health`);\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport async function getIChannelFromTg(channelId: string) {\r\n    const channelEnt = channelId.startsWith('-') ? channelId : `-100${channelId}`;\r\n    \r\n    const { id, defaultBannedRights, title, broadcast, username, participantsCount, restricted } = <Api.Channel>await TelegramManager.getInstance().getEntity(channelEnt)\r\n    const channel: IChannel = {\r\n        channelId: id.toString()?.replace(/^-100/, \"\"),\r\n        title,\r\n        participantsCount,\r\n        username,\r\n        restricted,\r\n        broadcast,\r\n        sendMessages: defaultBannedRights?.sendMessages,\r\n        canSendMsgs: !broadcast && !defaultBannedRights?.sendMessages,\r\n        availableMsgs: defaultMessages,\r\n        dMRestriction: 0,\r\n        banned: false,\r\n        reactions: defaultReactions,\r\n        reactRestricted: false,\r\n        wordRestriction: 0\r\n    }\r\n    return channel;\r\n}\r\n","import { Api } from \"telegram\";\r\nimport { getEntity } from \"telegram/client/users\";\r\nimport { NewMessageEvent } from \"telegram/events\";\r\nimport { sleep } from \"telegram/Helpers\";\r\nimport { fetchWithTimeout } from \"./fetchWithTimeout\";\r\nimport { parseError } from \"./parseError\";\r\nimport { ReactQueue } from \"./ReactQueue\";\r\nimport { contains, ppplbot } from \"./utils\";\r\n\r\nconst standardEmoticons = ['👍', '❤', '🔥', '👏', '🥰', '😁']\r\nconst emoticons = [\r\n    '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n    '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n    '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n    '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n    '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n    '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n    '👀', '🙈', '🤝', '🤗', '🆒',\r\n    '🗿', '🙉', '🙊', '🤷', '👎'\r\n]\r\nconst standardReactions = standardEmoticons.map(emoticon => new Api.ReactionEmoji({ emoticon }));\r\nlet defaultReactions = emoticons.map(emoticon => new Api.ReactionEmoji({ emoticon }));\r\n\r\nconst reactRestrictedIds = ['1798767939',\r\n    process.env.updatesChannel,\r\n    process.env.notifChannel,\r\n    \"1703065531\", \"1972065816\", \"1949920904\",\r\n    \"2184447313\", \"2189566730\", \"1870673087\",\r\n    \"1261993766\", \"1202668523\", \"1738391281\", \"1906584870\",\r\n    \"1399025405\", \"1868271399\", \"1843478697\", \"2113315849\", \"1937606045\",\r\n    \"1782145954\", \"1623008940\", \"1738135934\", \"1798503017\", \"1889233160\", \"1472089976\",\r\n    \"1156516733\", \"1514843822\", \"2029851294\", \"2097005513\", \"1897072643\", \"1903237199\",\r\n    \"1807801643\", \"1956951800\", \"1970106364\", \"2028322484\", \"2135964892\", \"2045602167\",\r\n    \"1486096882\", \"1336087349\", \"1878652859\", \"1711250382\", \"1959564784\", \"1345564184\",\r\n    \"1663368151\", \"1476492615\", \"1524427911\", \"1400204596\", \"1812110874\", \"1654557420\",\r\n    \"1765654210\", \"1860635416\", \"1675260943\", \"1730253703\", \"2030437007\", \"1213518210\",\r\n    \"1235057378\", \"1586912179\", \"1672828024\", \"2069091557\", \"1860671752\", \"2125364202\",\r\n    \"1959951200\", \"1607289097\", \"1929774605\", \"1780733848\", \"1685018515\", \"2057393918\",\r\n    \"1887746719\", \"1916123414\", \"1970767061\", \"2057158588\"\r\n]\r\n\r\n\r\nlet flag = true;\r\nlet flag2 = true;\r\nlet waitReactTime = Date.now();\r\nconst chatReactionsCache = new Map();\r\nlet lastReactedtime = Date.now();\r\nlet lastNotifiedTime = Date.now();\r\nlet reactionsRestarted = Date.now();\r\nlet totalReactionDelay = 0;\r\nlet successfulReactions = 0;\r\nlet averageReactionDelay = 0;\r\nlet minWaitTime = 15000;\r\nconst maxWaitTime = 25000;\r\nlet reactSleepTime = 17000;\r\nlet floodTriggeredTime = 0;\r\nlet floodCount = 0;\r\nlet targetReactionDelay = 17000;\r\n\r\nexport async function react(event: NewMessageEvent) {\r\n    const chatId = event.message.chatId.toString();\r\n    const reactQueue = ReactQueue.getInstance();\r\n\r\n    try {\r\n        if (!chatReactionsCache.has(chatId) && flag2) {\r\n            flag2 = false;\r\n            try {\r\n                const result = await event.client.invoke(new Api.channels.GetFullChannel({ channel: event.chatId }));\r\n                const reactionsJson: any = result?.fullChat?.availableReactions?.toJSON();\r\n                const availableReactions: Api.ReactionEmoji[] = reactionsJson?.reactions;\r\n\r\n                if (availableReactions && (availableReactions.length > 3 || availableReactions.length > defaultReactions.length)) {\r\n                    defaultReactions = availableReactions;\r\n                }\r\n\r\n                if ((!availableReactions || availableReactions.length < 1) && defaultReactions.length > 1) {\r\n                    chatReactionsCache.set(chatId, defaultReactions);\r\n                } else {\r\n                    chatReactionsCache.set(chatId, availableReactions);\r\n                }\r\n            } catch (error) {\r\n                parseError(error, \"Fetching Reactions\", false);\r\n                if (defaultReactions.length > 1) {\r\n                    chatReactionsCache.set(chatId, defaultReactions);\r\n                }\r\n            } finally {\r\n                flag2 = true;\r\n            }\r\n            await sleep(3000);\r\n        }\r\n\r\n        if (flag && waitReactTime < Date.now() && !reactQueue.contains(chatId) && !contains(chatId, reactRestrictedIds)) {\r\n            flag = false;\r\n            const availableReactions = chatReactionsCache.get(chatId);\r\n\r\n            if (availableReactions && availableReactions.length > 0) {\r\n                const reactionIndex = Math.floor(Math.random() * availableReactions.length);\r\n                const reaction = [availableReactions[reactionIndex]];\r\n                waitReactTime = Date.now() + reactSleepTime;\r\n                try {\r\n                    const MsgClass = new Api.messages.SendReaction({\r\n                        peer: event.message.chat,\r\n                        msgId: event.message.id,\r\n                        reaction: reaction\r\n                    });\r\n\r\n                    await event.client.invoke(MsgClass);\r\n\r\n                    const reactionDelay = Math.min(Date.now() - lastReactedtime, 25000);\r\n                    lastReactedtime = Date.now();\r\n                    totalReactionDelay += reactionDelay;\r\n                    successfulReactions += 1;\r\n                    averageReactionDelay = Math.floor(totalReactionDelay / successfulReactions);\r\n\r\n                    if (averageReactionDelay < targetReactionDelay) {\r\n                        reactSleepTime = Math.min(reactSleepTime + 200, maxWaitTime);\r\n                    } else {\r\n                        if (Date.now() > (floodTriggeredTime + 600000) && floodCount < 3) {\r\n                            reactSleepTime = Math.max(reactSleepTime - 50, minWaitTime);\r\n                        }\r\n                    }\r\n\r\n                    const chatEntity = <Api.Channel>await getEntity(event.client, chatId);\r\n                    console.log(\"Reacted Successfully, Average Reaction Delay:\", averageReactionDelay, \"ms\", reaction[0]?.toJSON().emoticon, chatEntity?.toJSON().title, chatEntity?.toJSON().username);\r\n                    reactQueue.push(chatId);\r\n\r\n                } catch (error) {\r\n                    if (error.seconds) {\r\n                        waitReactTime = Date.now() + (error.seconds * 1001);\r\n                        // if (floodTriggeredTime == 0 || floodTriggeredTime > (Date.now() - 30 * 60 * 1000)) {\r\n                        // }\r\n                        minWaitTime = Math.floor(minWaitTime + (error.seconds * 3));\r\n                        reactSleepTime = 17000;\r\n                        targetReactionDelay = targetReactionDelay + 500\r\n                        floodTriggeredTime = Date.now();\r\n                        floodCount++;\r\n                        // await fetchWithTimeout(`${notifbot}&text=${process.env.clientId?.toUpperCase()}: Reaction Flood: sleeping for ${error.seconds}`);\r\n                    } else {\r\n                        if (error.errorMessage == \"REACTION_INVALID\") {\r\n                            availableReactions.splice(reactionIndex, 1);\r\n                            chatReactionsCache.set(chatId, availableReactions);\r\n                        }\r\n                        const chatEntity = <Api.Channel>await getEntity(event.client, chatId);\r\n                        console.log('Failed to React:', reaction[0]?.toJSON().emoticon, chatEntity?.toJSON().username, error.errorMessage);\r\n                    }\r\n                }\r\n                flag = true;\r\n            } else {\r\n                chatReactionsCache.set(chatId, defaultReactions);\r\n                flag = true;\r\n            }\r\n        } else {\r\n            if (lastReactedtime < Date.now() - 60000 && (!flag || reactQueue.contains(chatId)) && reactionsRestarted < Date.now() - 30000) {\r\n                flag = true;\r\n                reactionsRestarted = Date.now();\r\n                console.log(\"Restarted Reactions\", flag, waitReactTime < Date.now(), !reactQueue.contains(chatId), !contains(chatId, reactRestrictedIds));\r\n            }\r\n\r\n            // if (lastReactedtime < Date.now() - 240000) {\r\n            //     const chatEntity = <Api.Channel>await getEntity(event.client, chatId);\r\n            //     console.log(\"Restarted not working Reactions\", flag, waitReactTime < Date.now(), !reactQueue.contains(chatId), !isLimitReached, !contains(chatId, reactRestrictedIds), chatId, chatEntity?.toJSON().username, chatEntity?.toJSON().title);\r\n            // }\r\n\r\n            if (lastReactedtime < Date.now() - 240000 && lastNotifiedTime < Date.now() - 5 * 60 * 1000) {\r\n                lastNotifiedTime = Date.now();\r\n                await fetchWithTimeout(`${ppplbot}&text=@${(process.env.clientId).toUpperCase()}: Reactions Not working: ${flag}|${waitReactTime < Date.now()}|${!reactQueue.contains(chatId)}|${!contains(chatId, reactRestrictedIds)}|${chatReactionsCache.get(chatId)?.length} since: ${Math.floor((Date.now() - lastReactedtime) / 1000)}`);\r\n                console.log(\"Restarted Reactions\", flag, waitReactTime < Date.now(), !reactQueue.contains(chatId), !contains(chatId, reactRestrictedIds));\r\n            }\r\n        }\r\n    } catch (error) {\r\n        parseError(error, \"Reaction Error\");\r\n        flag = true;\r\n        flag2 = true;\r\n    }\r\n}\r\n","export function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nexport function contains(str, arr) {\r\n  return (arr.some(element => {\r\n    if (str?.includes(element)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }))\r\n};\r\n\r\nexport function selectRandomElements<T>(array: T[], n: number): T[] {\r\n  if (array) {\r\n      const selectedElements: T[] = [];\r\n      for (let i = 0; i < n; i++) {\r\n          const randomIndex = Math.floor(Math.random() * array.length);\r\n          selectedElements.push(array[randomIndex]);\r\n      }\r\n      return selectedElements;\r\n  } else {\r\n      return [];\r\n  }\r\n}\r\n\r\nexport function toBoolean(value: string | number | boolean): boolean {\r\n  if (typeof value === 'string') {\r\n    return value.toLowerCase() === 'true';\r\n  }\r\n  if (typeof value === 'number') {\r\n    return value === 1;\r\n  }\r\n  return value\r\n}\r\n\r\nexport function fetchNumbersFromString(inputString) {\r\n  const regex = /\\d+/g;\r\n  const matches = inputString.match(regex);\r\n  if (matches) {\r\n    const result = matches.join('');\r\n    return result;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function parseError(\r\n  err,\r\n  prefix = 'TgCms',\r\n) {\r\n  let status = 'UNKNOWN';\r\n  let message = 'An unknown error occurred';\r\n  let error = 'UnknownError';\r\n\r\n  const extractMessage = (data) => {\r\n    if (Array.isArray(data)) {\r\n      const messages = data.map((item) => extractMessage(item));\r\n      return messages.filter((message) => message !== undefined).join(', ');\r\n    } else if (typeof data === 'string') {\r\n      return data;\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      let resultString = ''\r\n      for (const key in data) {\r\n        const value = data[key]\r\n        if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\r\n          resultString = resultString + data[key].join(', ');\r\n        } else {\r\n          const result = extractMessage(value);\r\n          if (result) {\r\n            resultString = resultString + result;\r\n          }\r\n        }\r\n      }\r\n      return resultString\r\n    }\r\n    return JSON.stringify(data);\r\n  };\r\n\r\n  if (err.response) {\r\n    const response = err.response;\r\n    status =\r\n      response.data?.status ||\r\n      response.status ||\r\n      err.status ||\r\n      'UNKNOWN';\r\n    message =\r\n      response.data?.message ||\r\n      response.data?.errors ||\r\n      response.message ||\r\n      response.statusText ||\r\n      response.data ||\r\n      err.message ||\r\n      'An error occurred';\r\n    error =\r\n      response.data?.error ||\r\n      response.error ||\r\n      err.name ||\r\n      err.code ||\r\n      'Error';\r\n  } else if (err.request) {\r\n    status = err.status || 'NO_RESPONSE';\r\n    message = err.data?.message ||\r\n      err.data?.errors ||\r\n      err.message ||\r\n      err.statusText ||\r\n      err.data ||\r\n      err.message || 'The request was triggered but no response was received';\r\n    error = err.name || err.code || 'NoResponseError';\r\n  } else if (err.message) {\r\n    status = err.status || 'UNKNOWN';\r\n    message = err.message;\r\n    error = err.name || err.code || 'Error';\r\n  } else if (err.errorMessage) {\r\n    status = err.status || 'UNKNOWN';\r\n    message = err.errorMessage;\r\n    error = err.name || err.code || 'Error';\r\n  }\r\n\r\n  const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\r\n\r\n  const resp = { status, message: msg, error };\r\n  console.log(resp.error == 'RPCError' ? resp.message : resp);\r\n  return resp\r\n}\r\nlet botCount = 0;\r\n\r\nexport function ppplbot(chatId?: string, botToken?: string) {\r\n  let token = botToken;\r\n\r\n  if (!token) {\r\n    if (botCount % 2 === 1) {\r\n      token = 'bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY';\r\n    } else {\r\n      token = 'bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA';\r\n    }\r\n    botCount++;\r\n  }\r\n  const targetChatId = chatId || '-1001801844217'; // Replace with actual chat ID\r\n  const apiUrl = `https://api.telegram.org/${token}/sendMessage?chat_id=${targetChatId}`;\r\n  return apiUrl;\r\n};\r\n\r\nexport const defaultReactions = [\r\n  '❤', '🔥', '👏', '🥰', '😁', '🤔',\r\n  '🤯', '😱', '🤬', '😢', '🎉', '🤩',\r\n  '🤮', '💩', '🙏', '👌', '🕊', '🤡',\r\n  '🥱', '🥴', '😍', '🐳', '❤‍🔥', '💯',\r\n  '🤣', '💔', '🏆', '😭', '😴', '👍',\r\n  '🌚', '⚡', '🍌', '😐', '💋', '👻',\r\n  '👀', '🙈', '🤝', '🤗', '🆒',\r\n  '🗿', '🙉', '🙊', '🤷', '👎'\r\n]\r\nexport const defaultMessages = [\r\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\r\n  \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\r\n  \"16\", \"17\", \"18\"\r\n];\r\n","module.exports = require(\"axios\");","module.exports = require(\"big-integer\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"mongodb\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/client/users\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}